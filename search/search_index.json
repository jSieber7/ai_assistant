{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Agent Workflow Documentation","text":"<p>Welcome to the AI Assistant project documentation! This project provides an OpenAI-compatible API interface for LLM agents with tool-calling capabilities.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>UV package manager</li> <li>OpenRouter API key</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/jSieber7/ai_assistant.git\ncd ai_assistant\ncp .env.template .env\n\nuv venv .venv\nuv sync\nuv run uvicorn app.main:app --reload # For the current build in development\n</code></pre>"},{"location":"#first-steps","title":"First Steps","text":"<ol> <li>Get your OpenRouter API key from openrouter.ai</li> <li>Add it to your <code>.env</code> file: <code>OPENROUTER_API_KEY=your_key_here</code></li> <li>Visit the API documentation at <code>http://localhost:8000/docs</code></li> </ol>"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#architecture","title":"Architecture","text":"<ul> <li>System design and components</li> <li>Agent workflow and tool orchestration</li> <li>Integration patterns and extensibility</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>OpenAI-compatible endpoints</li> <li>Request/response formats</li> <li>Authentication and error handling</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Setup instructions and environment configuration</li> <li>Contributing guidelines</li> <li>Testing and code quality standards</li> </ul>"},{"location":"#tools","title":"Tools","text":"<ul> <li>Tool integrations and extensions</li> <li>SearX web search integration</li> <li>RAG knowledge base system</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#openai-api-compatibility","title":"OpenAI API Compatibility","text":"<p>Full compatibility with the OpenAI API specification, allowing integration with various LLM frontends and tools.</p>"},{"location":"#tool-calling-agents","title":"Tool-Calling Agents","text":"<p>Extensible architecture for adding new tools and capabilities to the AI assistant.</p>"},{"location":"#real-time-streaming","title":"Real-time Streaming","text":"<p>Support for streaming responses for interactive chat experiences.</p>"},{"location":"#comprehensive-testing","title":"Comprehensive Testing","text":"<p>Robust test suite with unit tests, integration tests, and security scanning.</p>"},{"location":"#technology-stack","title":"\ud83d\udd27 Technology Stack","text":"<ul> <li>Backend: FastAPI with Python 3.12</li> <li>LLM Integration: LangChain with OpenRouter</li> <li>Dependency Management: UV</li> <li>Testing: pytest with coverage reporting</li> <li>CI/CD: GitHub Actions with security scanning</li> <li>Documentation: MkDocs with Material theme</li> </ul>"},{"location":"#development-status","title":"Development Status","text":"<p>Current Version: 0.2.0</p>"},{"location":"#implemented-features","title":"Implemented Features","text":"<ul> <li>\u2705 OpenAI-compatible API endpoints</li> <li>\u2705 OpenRouter integration for multiple LLM providers</li> <li>\u2705 Streaming response support</li> <li>\u2705 Comprehensive test suite</li> <li>\u2705 GitHub Actions CI/CD pipeline</li> <li>\u2705 Security scanning and code quality checks</li> </ul>"},{"location":"#planned-features","title":"Planned Features","text":"<ul> <li>\ud83d\udd04 Ability to use local as well as more cloud based LLMs</li> <li>\ud83d\udd04 SearX web search integration</li> <li>\ud83d\udd04 RAG knowledge base system</li> <li>\ud83d\udd04 Additional tool integrations</li> <li>\ud83d\udd04 Docker containerization</li> <li>\ud83d\udd04 Advanced agent capabilities</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions will be welcomed soon! Please see our Contributing Guide for details on how to get involved.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: This site contains comprehensive documentation</li> <li>Issues: Check existing issues or create new ones on GitHub</li> </ul>"},{"location":"#project-metrics","title":"Project Metrics","text":"<ul> <li>Test Coverage: Comprehensive unit and integration tests</li> <li>Code Quality: Enforced with ruff, black, and mypy</li> <li>Security: Regular scanning with bandit and pip-audit</li> <li>Performance: Optimized for low-latency responses</li> </ul>"},{"location":"#security","title":"Security","text":"<p>Security measures include</p> <ul> <li>No hardcoded API keys or secrets</li> <li>Comprehensive security scanning in CI/CD</li> <li>Regular dependency vulnerability checks</li> <li>Secure development practices</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is open source with an MIT license.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Built with FastAPI for high-performance APIs</li> <li>Powered by LangChain for LLM orchestration</li> <li>Integrated with OpenRouter for model access</li> <li>Documented with MkDocs and Material</li> </ul>"},{"location":"api/endpoints/","title":"API Endpoints Reference","text":"<p>This document describes the FastAPI endpoints available in the AI Assistant application.</p>"},{"location":"api/endpoints/#overview","title":"Overview","text":"<p>The AI Assistant provides an OpenAI-compatible API interface that can be used with various LLM frontends. All endpoints are designed to be compatible with the OpenAI API specification.</p>"},{"location":"api/endpoints/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre>"},{"location":"api/endpoints/#authentication","title":"Authentication","text":"<p>Currently, the API does not require authentication for local development. For production deployments, consider adding API key authentication.</p>"},{"location":"api/endpoints/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api/endpoints/#get-health","title":"GET /health","text":"<p>Health check endpoint</p> <p>Returns the current status of the service.</p> <p>Response:</p> <pre><code>{\n  \"status\": \"healthy\",\n  \"service\": \"langchain-agent-hub\"\n}\n</code></pre> <p>Example:</p> <pre><code>curl http://localhost:8000/health\n</code></pre>"},{"location":"api/endpoints/#get-v1models","title":"GET /v1/models","text":"<p>List available models</p> <p>Returns a list of available models. Currently supports the LangChain agent hub model.</p> <p>Response:</p> <pre><code>{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"langchain-agent-hub\",\n      \"object\": \"model\",\n      \"created\": 1677610602,\n      \"owned_by\": \"langchain-agent-hub\",\n      \"permission\": [],\n      \"root\": \"langchain-agent-hub\",\n      \"parent\": null\n    }\n  ]\n}\n</code></pre> <p>Example:</p> <pre><code>curl http://localhost:8000/v1/models\n</code></pre>"},{"location":"api/endpoints/#post-v1chatcompletions","title":"POST /v1/chat/completions","text":"<p>Chat completions endpoint</p> <p>Main endpoint for interacting with the AI assistant. Supports both streaming and non-streaming responses.</p> <p>Request Body:</p> <pre><code>{\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a helpful AI assistant.\"\n    },\n    {\n      \"role\": \"user\", \n      \"content\": \"Hello, how are you?\"\n    }\n  ],\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"stream\": false,\n  \"temperature\": 0.7,\n  \"max_tokens\": 1000\n}\n</code></pre> <p>Parameters: - <code>messages</code> (array): Array of message objects with role and content - <code>model</code> (string, optional): Model to use (default: \"anthropic/claude-3.5-sonnet\") - <code>stream</code> (boolean): Whether to stream the response (default: false) - <code>temperature</code> (number): Sampling temperature (default: 0.7) - <code>max_tokens</code> (number, optional): Maximum tokens to generate</p> <p>Response (non-streaming):</p> <pre><code>{\n  \"id\": \"chatcmpl-123456789\",\n  \"object\": \"chat.completion\",\n  \"model\": \"anthropic/claude-3.5-sonnet\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"I'm doing well, thank you! How can I help you today?\"\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ]\n}\n</code></pre> <p>Streaming Response: The streaming response uses Server-Sent Events (SSE) format with <code>text/plain</code> content type.</p> <p>Example (non-streaming):</p> <pre><code>curl -X POST http://localhost:8000/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"What is the capital of France?\"\n      }\n    ],\n    \"model\": \"anthropic/claude-3.5-sonnet\"\n  }'\n</code></pre>"},{"location":"api/endpoints/#error-handling","title":"Error Handling","text":"<p>The API returns standard HTTP status codes:</p> <ul> <li><code>200</code>: Success</li> <li><code>400</code>: Bad Request (malformed request)</li> <li><code>422</code>: Unprocessable Entity (validation error)</li> <li><code>500</code>: Internal Server Error</li> </ul> <p>Error Response Example:</p> <pre><code>{\n  \"detail\": \"OPENROUTER_API_KEY is not set in the environment\"\n}\n</code></pre>"},{"location":"api/endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>Currently, no rate limiting is implemented. For production use, consider implementing rate limiting based on your requirements.</p>"},{"location":"api/endpoints/#cors-support","title":"CORS Support","text":"<p>The API supports CORS (Cross-Origin Resource Sharing) for web applications. The following origins are allowed by default:</p> <ul> <li><code>http://localhost:3000</code></li> <li><code>http://localhost:8080</code></li> </ul>"},{"location":"api/endpoints/#testing-the-api","title":"Testing the API","text":"<p>You can test the API using the provided test suite:</p> <pre><code># Run unit tests\npython run_tests.py --unit\n\n# Run integration tests (starts a test server)\npython run_tests.py --integration\n</code></pre>"},{"location":"api/endpoints/#openapi-documentation","title":"OpenAPI Documentation","text":"<p>The API includes auto-generated OpenAPI documentation available at:</p> <pre><code>http://localhost:8000/docs\n</code></pre> <p>This interactive documentation allows you to test endpoints directly from the browser.</p>"},{"location":"api/endpoints/#next-steps","title":"Next Steps","text":"<ul> <li>[ ] Add authentication middleware</li> <li>[ ] Implement rate limiting</li> <li>[ ] Add more model options</li> <li>[ ] Implement tool calling endpoints</li> <li>[ ] Add batch processing support</li> </ul>"},{"location":"architecture/overview/","title":"System Architecture Overview","text":"<p>This document describes the high-level architecture of the AI Assistant project, including its components, data flow, and design principles.</p>"},{"location":"architecture/overview/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client Apps   \u2502\u25c4\u2500\u2500\u25ba\u2502   FastAPI API    \u2502\u25c4\u2500\u2500\u25ba\u2502   LLM Agents    \u2502\n\u2502 (OpenWebUI,     \u2502    \u2502  (OpenAI-compat) \u2502    \u2502   (LangChain)   \u2502\n\u2502  Chat Apps)     \u2502    \u2502                  \u2502    \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Web Frontend  \u2502    \u2502   Tool System    \u2502\u25c4\u2500\u2500\u25ba\u2502  External APIs  \u2502\n\u2502   (Optional)    \u2502    \u2502  (Extensible)    \u2502    \u2502 (OpenRouter,    \u2502\n\u2502                 \u2502    \u2502                  \u2502    \u2502   SearX, RAG)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#core-components","title":"Core Components","text":""},{"location":"architecture/overview/#1-api-layer-fastapi","title":"1. API Layer (FastAPI)","text":"<ul> <li>Purpose: Provide OpenAI-compatible interface</li> <li>Technology: FastAPI with Pydantic models Features </li> <li>OpenAPI documentation</li> <li>Streaming responses</li> <li>CORS support</li> <li>Authentication (planned)</li> </ul>"},{"location":"architecture/overview/#2-llm-agent-layer-langchain","title":"2. LLM Agent Layer (LangChain)","text":"<ul> <li>Purpose: Orchestrate LLM interactions and tool calling</li> <li>Technology: LangChain with custom agents Features</li> <li>Multi-model support via OpenRouter</li> <li>Tool calling capabilities</li> <li>Conversation memory</li> <li>Response streaming</li> </ul>"},{"location":"architecture/overview/#3-tool-system-extensible","title":"3. Tool System (Extensible)","text":"<ul> <li>Purpose: Extend AI capabilities with external tools</li> <li>Technology: Modular tool architecture Current Tools</li> <li>Web search (SearX integration - planned)</li> <li>Knowledge base (RAG system - planned)</li> <li>Custom tool development framework</li> </ul>"},{"location":"architecture/overview/#4-data-layer","title":"4. Data Layer","text":"<ul> <li>Purpose: Manage application data and vector storage</li> <li>Technology: PostgreSQL with pgvector (planned) Features</li> <li>Vector embeddings for RAG</li> <li>Document storage and retrieval</li> <li>Conversation history (planned)</li> </ul>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"architecture/overview/#standard-chat-flow","title":"Standard Chat Flow","text":"<ol> <li>Request Reception: Client sends chat request to <code>/v1/chat/completions</code></li> <li>Message Processing: Convert OpenAI format to LangChain messages</li> <li>Agent Execution: LangChain agent processes request with available tools</li> <li>Tool Execution: If needed, tools are called to gather information</li> <li>Response Generation: LLM generates response based on context</li> <li>Response Formatting: Convert LangChain response to OpenAI format</li> <li>Streaming: Send response chunks back to client</li> </ol>"},{"location":"architecture/overview/#tool-calling-flow","title":"Tool Calling Flow","text":"<ol> <li>Tool Detection: Agent determines if tools are needed</li> <li>Tool Selection: Choose appropriate tool based on query</li> <li>Tool Execution: Run tool with parameters</li> <li>Result Integration: Combine tool results with conversation context</li> <li>Response Generation: Generate final response with tool insights</li> </ol>"},{"location":"architecture/overview/#design-principles","title":"Design Principles","text":""},{"location":"architecture/overview/#1-openai-compatibility","title":"1. OpenAI Compatibility","text":"<ul> <li>Full compliance with OpenAI API specification</li> <li>Support for both streaming and non-streaming responses</li> <li>Standard error codes and response formats</li> </ul>"},{"location":"architecture/overview/#2-extensibility","title":"2. Extensibility","text":"<ul> <li>Modular tool system for adding new capabilities</li> <li>Plugin architecture for custom integrations</li> <li>Configuration-driven behavior</li> </ul>"},{"location":"architecture/overview/#3-security-first","title":"3. Security First","text":"<ul> <li>No hardcoded API keys or secrets</li> <li>Environment-based configuration</li> <li>Input validation and sanitization</li> <li>Regular security scanning</li> </ul>"},{"location":"architecture/overview/#4-performance","title":"4. Performance","text":"<ul> <li>Async/await for non-blocking operations</li> <li>Connection pooling for external APIs</li> <li>Caching strategies for frequent operations</li> <li>Efficient vector search algorithms</li> </ul>"},{"location":"architecture/overview/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/overview/#backend","title":"Backend","text":"<ul> <li>Framework: FastAPI (Python 3.12)</li> <li>LLM Orchestration: LangChain</li> <li>Vector Database: PostgreSQL + pgvector (planned)</li> <li>API Client: HTTPX for async requests</li> </ul>"},{"location":"architecture/overview/#development-tools","title":"Development Tools","text":"<ul> <li>Package Manager: UV</li> <li>Testing: pytest with coverage</li> <li>Code Quality: ruff, black, mypy</li> <li>Security: bandit, pip-audit</li> </ul>"},{"location":"architecture/overview/#infrastructure","title":"Infrastructure","text":"<ul> <li>CI/CD: GitHub Actions</li> <li>Documentation: MkDocs + Material theme</li> <li>Containerization: Docker (planned)</li> </ul>"},{"location":"architecture/overview/#configuration-management","title":"Configuration Management","text":""},{"location":"architecture/overview/#environment-based-configuration","title":"Environment-Based Configuration","text":"<pre><code># app/core/config.py\nclass Settings(BaseSettings):\n    openrouter_api_key: Optional[SecretStr] = None\n    openrouter_base_url: str = \"https://openrouter.ai/api/v1\"\n    default_model: str = \"anthropic/claude-3.5-sonnet\"\n    # ... other settings\n</code></pre>"},{"location":"architecture/overview/#security-considerations","title":"Security Considerations","text":"<ul> <li>API keys stored as <code>SecretStr</code></li> <li>Environment variables for sensitive data</li> <li>Validation of all configuration values</li> <li>Secure defaults for production</li> </ul>"},{"location":"architecture/overview/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/overview/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Stateless API design</li> <li>External session storage (planned)</li> <li>Load balancer compatibility</li> </ul>"},{"location":"architecture/overview/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Connection pooling for database and API calls</li> <li>Caching layer for frequent queries</li> <li>Async processing for I/O operations</li> </ul>"},{"location":"architecture/overview/#monitoring-and-observability","title":"Monitoring and Observability","text":"<ul> <li>Structured logging</li> <li>Performance metrics collection</li> <li>Health check endpoints</li> <li>Error tracking and alerting</li> </ul>"},{"location":"architecture/overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/overview/#development-environment","title":"Development Environment","text":"<ul> <li>Local execution with hot reload</li> <li>Mock external services for testing</li> <li>Detailed logging and debugging</li> </ul>"},{"location":"architecture/overview/#production-environment","title":"Production Environment","text":"<ul> <li>Containerized deployment</li> <li>Environment-specific configuration</li> <li>Health monitoring and auto-recovery</li> <li>Scalable infrastructure</li> </ul>"},{"location":"architecture/overview/#integration-patterns","title":"Integration Patterns","text":""},{"location":"architecture/overview/#external-api-integration","title":"External API Integration","text":"<ul> <li>Async HTTP clients with retry logic</li> <li>Circuit breaker pattern for resilience</li> <li>Rate limiting and backoff strategies</li> </ul>"},{"location":"architecture/overview/#tool-integration","title":"Tool Integration","text":"<ul> <li>Standardized tool interface</li> <li>Error handling and fallbacks</li> <li>Performance monitoring</li> </ul>"},{"location":"architecture/overview/#future-architecture-evolution","title":"Future Architecture Evolution","text":""},{"location":"architecture/overview/#phase-1-core-stability","title":"Phase 1: Core Stability","text":"<ul> <li>[x] Basic OpenAI-compatible API</li> <li>[x] LangChain integration</li> <li>[ ] Tool system foundation</li> </ul>"},{"location":"architecture/overview/#phase-2-advanced-features","title":"Phase 2: Advanced Features","text":"<ul> <li>[ ] SearX web search integration</li> <li>[ ] RAG knowledge base</li> <li>[ ] Advanced tool capabilities</li> </ul>"},{"location":"architecture/overview/#phase-3-production-ready","title":"Phase 3: Production Ready","text":"<ul> <li>[ ] Docker containerization</li> <li>[ ] Advanced monitoring</li> <li>[ ] High availability setup</li> </ul>"},{"location":"architecture/overview/#related-documentation","title":"Related Documentation","text":"<ul> <li>API Endpoints Reference</li> <li>Development Setup Guide</li> <li>Tool System Design</li> <li>Agent Workflow</li> </ul>"},{"location":"architecture/overview/#decision-log","title":"Decision Log","text":""},{"location":"architecture/overview/#technology-choices","title":"Technology Choices","text":"<ul> <li>FastAPI: Chosen for performance, async support, and automatic OpenAPI docs</li> <li>LangChain: Industry standard for LLM orchestration with extensive tooling</li> <li>PostgreSQL + pgvector: Robust, scalable vector database solution</li> <li>UV: Fast, modern Python package manager with excellent dependency resolution</li> </ul>"},{"location":"architecture/overview/#architecture-decisions","title":"Architecture Decisions","text":"<ul> <li>OpenAI Compatibility: Ensures wide compatibility with existing tools</li> <li>Modular Tool System: Allows incremental feature development</li> <li>Async-First Design: Optimal for I/O-heavy LLM operations</li> <li>Security-First Approach: Protects sensitive API keys and user data</li> </ul> <p>This architecture provides a solid foundation for building a powerful, extensible AI assistant while maintaining security, performance, and developer experience.</p>"},{"location":"architecture/tools/","title":"Tool System Design","text":"<p>This document describes the tool system architecture for the AI Assistant, including how tools are integrated, managed, and executed by the agent.</p>"},{"location":"architecture/tools/#tool-system-overview","title":"Tool System Overview","text":"<p>The tool system provides a modular way to extend the AI assistant's capabilities beyond its built-in knowledge. Tools are self-contained modules that can be called by the agent to perform specific tasks.</p>"},{"location":"architecture/tools/#architecture","title":"Architecture","text":""},{"location":"architecture/tools/#tool-interface","title":"Tool Interface","text":"<p>All tools implement a standard interface:</p> <pre><code>from abc import ABC, abstractmethod\nfrom typing import Any, Dict, Optional\n\nclass BaseTool(ABC):\n    \"\"\"Base class for all tools.\"\"\"\n\n    @property\n    @abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"Unique name of the tool.\"\"\"\n        pass\n\n    @property\n    @abstractmethod\n    def description(self) -&gt; str:\n        \"\"\"Description of what the tool does.\"\"\"\n        pass\n\n    @property\n    def parameters(self) -&gt; Dict[str, Any]:\n        \"\"\"Expected parameters for the tool.\"\"\"\n        return {}\n\n    @abstractmethod\n    async def execute(self, **kwargs) -&gt; Any:\n        \"\"\"Execute the tool with given parameters.\"\"\"\n        pass\n\n    def should_use(self, query: str) -&gt; bool:\n        \"\"\"Determine if this tool should be used for the given query.\"\"\"\n        # Default implementation based on keyword matching\n        keywords = getattr(self, 'keywords', [])\n        return any(keyword in query.lower() for keyword in keywords)\n</code></pre>"},{"location":"architecture/tools/#tool-registry","title":"Tool Registry","text":"<p>Tools are registered in a central registry for discovery and management:</p> <pre><code>class ToolRegistry:\n    def __init__(self):\n        self._tools = {}\n\n    def register(self, tool: BaseTool):\n        \"\"\"Register a new tool.\"\"\"\n        self._tools[tool.name] = tool\n\n    def get_tool(self, name: str) -&gt; Optional[BaseTool]:\n        \"\"\"Get a tool by name.\"\"\"\n        return self._tools.get(name)\n\n    def list_tools(self) -&gt; List[BaseTool]:\n        \"\"\"List all available tools.\"\"\"\n        return list(self._tools.values())\n\n    def find_relevant_tools(self, query: str) -&gt; List[BaseTool]:\n        \"\"\"Find tools relevant to the given query.\"\"\"\n        return [tool for tool in self._tools.values() if tool.should_use(query)]\n</code></pre>"},{"location":"architecture/tools/#built-in-tools","title":"Built-in Tools","text":""},{"location":"architecture/tools/#web-search-tool-searx-integration","title":"Web Search Tool (SearX Integration)","text":"<p>Purpose: Search the web for current information</p> <p>Implementation:</p> <pre><code>class WebSearchTool(BaseTool):\n    @property\n    def name(self) -&gt; str:\n        return \"web_search\"\n\n    @property\n    def description(self) -&gt; str:\n        return \"Search the web for current information, news, and real-time data\"\n\n    @property\n    def keywords(self) -&gt; List[str]:\n        return [\"current\", \"latest\", \"news\", \"search\", \"find\", \"look up\"]\n\n    @property\n    def parameters(self) -&gt; Dict[str, Any]:\n        return {\n            \"query\": {\"type\": \"string\", \"description\": \"Search query\"},\n            \"max_results\": {\"type\": \"int\", \"default\": 5, \"description\": \"Maximum results to return\"}\n        }\n\n    async def execute(self, query: str, max_results: int = 5) -&gt; Dict[str, Any]:\n        \"\"\"Execute web search using SearX.\"\"\"\n        async with httpx.AsyncClient() as client:\n            response = await client.get(\n                f\"{SEARX_URL}/search\",\n                params={\n                    \"q\": query,\n                    \"format\": \"json\",\n                    \"categories\": \"general\",\n                    \"language\": \"en\",\n                    \"time_range\": \"day\"  # Recent results\n                }\n            )\n            results = response.json()\n            return self._format_results(results[\"results\"][:max_results])\n</code></pre>"},{"location":"architecture/tools/#rag-tool-knowledge-base","title":"RAG Tool (Knowledge Base)","text":"<p>Purpose: Search internal documents and knowledge base</p> <p>Implementation:</p> <pre><code>class RAGTool(BaseTool):\n    @property\n    def name(self) -&gt; str:\n        return \"knowledge_search\"\n\n    @property\n    def description(self) -&gt; str:\n        return \"Search internal documents and knowledge base for specific information\"\n\n    @property\n    def keywords(self) -&gt; List[str]:\n        return [\"document\", \"knowledge\", \"internal\", \"file\", \"pdf\", \"doc\"]\n\n    async def execute(self, query: str, document_ids: List[str] = None) -&gt; Dict[str, Any]:\n        \"\"\"Search knowledge base using vector similarity.\"\"\"\n        # Convert query to embedding\n        embedding = await self._get_embedding(query)\n\n        # Search vector database\n        results = await self._vector_db.similarity_search(\n            embedding, \n            k=5, \n            document_ids=document_ids\n        )\n\n        return self._format_rag_results(results)\n</code></pre>"},{"location":"architecture/tools/#calculator-tool","title":"Calculator Tool","text":"<p>Purpose: Perform mathematical calculations</p> <p>Implementation:</p> <pre><code>class CalculatorTool(BaseTool):\n    @property\n    def name(self) -&gt; str:\n        return \"calculator\"\n\n    @property\n    def description(self) -&gt; str:\n        return \"Perform mathematical calculations and conversions\"\n\n    @property\n    def keywords(self) -&gt; List[str]:\n        return [\"calculate\", \"math\", \"equation\", \"convert\", \"sum\", \"multiply\"]\n\n    async def execute(self, expression: str) -&gt; float:\n        \"\"\"Evaluate mathematical expression.\"\"\"\n        try:\n            # Safe evaluation of mathematical expressions\n            result = eval(expression, {\"__builtins__\": {}}, math.__dict__)\n            return result\n        except Exception as e:\n            raise ToolError(f\"Failed to evaluate expression: {e}\")\n</code></pre>"},{"location":"architecture/tools/#tool-integration","title":"Tool Integration","text":""},{"location":"architecture/tools/#agent-tool-communication","title":"Agent-Tool Communication","text":"<p>The agent uses a structured format to communicate with tools:</p> <pre><code>class ToolCall:\n    def __init__(self, tool_name: str, parameters: Dict[str, Any]):\n        self.tool_name = tool_name\n        self.parameters = parameters\n\n    async def execute(self, registry: ToolRegistry) -&gt; ToolResult:\n        tool = registry.get_tool(self.tool_name)\n        if not tool:\n            raise ToolError(f\"Tool not found: {self.tool_name}\")\n\n        try:\n            result = await tool.execute(**self.parameters)\n            return ToolResult(success=True, data=result, tool_name=self.tool_name)\n        except Exception as e:\n            return ToolResult(success=False, error=str(e), tool_name=self.tool_name)\n</code></pre>"},{"location":"architecture/tools/#tool-selection-strategy","title":"Tool Selection Strategy","text":"<p>The agent uses a multi-factor approach to select tools:</p> <pre><code>class ToolSelector:\n    def __init__(self, registry: ToolRegistry):\n        self.registry = registry\n\n    async def select_tools(self, query: str, context: Dict[str, Any]) -&gt; List[ToolCall]:\n        # Step 1: Keyword-based matching\n        relevant_tools = self.registry.find_relevant_tools(query)\n\n        # Step 2: Context-aware filtering\n        filtered_tools = await self._filter_by_context(relevant_tools, context)\n\n        # Step 3: Priority scoring\n        scored_tools = self._score_tools(filtered_tools, query)\n\n        # Step 4: Select top tools (limit to avoid overuse)\n        selected_tools = scored_tools[:3]  # Max 3 tools per query\n\n        return [ToolCall(tool.name, self._extract_parameters(tool, query)) \n                for tool in selected_tools]\n</code></pre>"},{"location":"architecture/tools/#error-handling","title":"Error Handling","text":""},{"location":"architecture/tools/#tool-error-types","title":"Tool Error Types","text":"<pre><code>class ToolError(Exception):\n    \"\"\"Base class for tool errors.\"\"\"\n    pass\n\nclass ToolTimeoutError(ToolError):\n    \"\"\"Tool execution timed out.\"\"\"\n    pass\n\nclass ToolConfigurationError(ToolError):\n    \"\"\"Tool is misconfigured.\"\"\"\n    pass\n\nclass ToolExecutionError(ToolError):\n    \"\"\"Tool execution failed.\"\"\"\n    pass\n</code></pre>"},{"location":"architecture/tools/#graceful-error-handling","title":"Graceful Error Handling","text":"<pre><code>async def execute_tool_with_fallback(tool_call: ToolCall, registry: ToolRegistry) -&gt; ToolResult:\n    try:\n        return await tool_call.execute(registry)\n    except ToolTimeoutError:\n        logger.warning(f\"Tool {tool_call.tool_name} timed out\")\n        return ToolResult(\n            success=False,\n            error=\"Tool timed out\",\n            tool_name=tool_call.tool_name,\n            fallback_used=True\n        )\n    except ToolExecutionError as e:\n        logger.error(f\"Tool {tool_call.tool_name} failed: {e}\")\n        return ToolResult(\n            success=False,\n            error=str(e),\n            tool_name=tool_call.tool_name\n        )\n</code></pre>"},{"location":"architecture/tools/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/tools/#caching-strategy","title":"Caching Strategy","text":"<pre><code>class CachedTool(BaseTool):\n    \"\"\"Tool wrapper with caching capabilities.\"\"\"\n\n    def __init__(self, tool: BaseTool, cache_ttl: int = 300):\n        self._tool = tool\n        self._cache = {}\n        self._cache_ttl = cache_ttl\n\n    async def execute(self, **kwargs) -&gt; Any:\n        # Create cache key from parameters\n        cache_key = self._create_cache_key(kwargs)\n\n        # Check cache\n        if cache_key in self._cache:\n            cached_result = self._cache[cache_key]\n            if time.time() - cached_result[\"timestamp\"] &lt; self._cache_ttl:\n                return cached_result[\"data\"]\n\n        # Execute tool and cache result\n        result = await self._tool.execute(**kwargs)\n        self._cache[cache_key] = {\n            \"data\": result,\n            \"timestamp\": time.time()\n        }\n\n        return result\n</code></pre>"},{"location":"architecture/tools/#parallel-execution","title":"Parallel Execution","text":"<pre><code>async def execute_tools_parallel(tool_calls: List[ToolCall], registry: ToolRegistry) -&gt; List[ToolResult]:\n    \"\"\"Execute multiple tools in parallel.\"\"\"\n    tasks = []\n    for tool_call in tool_calls:\n        task = asyncio.create_task(\n            execute_tool_with_fallback(tool_call, registry)\n        )\n        tasks.append(task)\n\n    results = await asyncio.gather(*tasks, return_exceptions=True)\n    return [r for r in results if not isinstance(r, Exception)]\n</code></pre>"},{"location":"architecture/tools/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/tools/#input-validation","title":"Input Validation","text":"<pre><code>def validate_tool_parameters(tool: BaseTool, parameters: Dict[str, Any]) -&gt; bool:\n    \"\"\"Validate tool parameters against expected schema.\"\"\"\n    expected_params = tool.parameters\n\n    for param_name, param_schema in expected_params.items():\n        if param_name not in parameters:\n            if \"default\" not in param_schema:\n                return False\n\n        param_value = parameters.get(param_name, param_schema.get(\"default\"))\n\n        # Type validation\n        expected_type = param_schema.get(\"type\")\n        if expected_type and not isinstance(param_value, expected_type):\n            return False\n\n    return True\n</code></pre>"},{"location":"architecture/tools/#rate-limiting","title":"Rate Limiting","text":"<pre><code>class RateLimitedTool(BaseTool):\n    \"\"\"Tool wrapper with rate limiting.\"\"\"\n\n    def __init__(self, tool: BaseTool, calls_per_minute: int = 60):\n        self._tool = tool\n        self._rate_limiter = RateLimiter(calls_per_minute)\n\n    async def execute(self, **kwargs) -&gt; Any:\n        await self._rate_limiter.acquire()\n        return await self._tool.execute(**kwargs)\n</code></pre>"},{"location":"architecture/tools/#monitoring-and-metrics","title":"Monitoring and Metrics","text":""},{"location":"architecture/tools/#tool-usage-tracking","title":"Tool Usage Tracking","text":"<pre><code>class InstrumentedTool(BaseTool):\n    \"\"\"Tool wrapper with instrumentation.\"\"\"\n\n    def __init__(self, tool: BaseTool):\n        self._tool = tool\n        self._metrics = ToolMetrics()\n\n    async def execute(self, **kwargs) -&gt; Any:\n        start_time = time.time()\n\n        try:\n            result = await self._tool.execute(**kwargs)\n            self._metrics.record_success(\n                self._tool.name,\n                time.time() - start_time\n            )\n            return result\n        except Exception as e:\n            self._metrics.record_failure(self._tool.name, str(e))\n            raise\n</code></pre>"},{"location":"architecture/tools/#metrics-collection","title":"Metrics Collection","text":"<pre><code>class ToolMetrics:\n    def __init__(self):\n        self.success_count = 0\n        self.failure_count = 0\n        self.total_time = 0\n\n    def record_success(self, tool_name: str, duration: float):\n        self.success_count += 1\n        self.total_time += duration\n        # Export to monitoring system\n        export_metric(f\"tool.{tool_name}.success\", 1)\n        export_metric(f\"tool.{tool_name}.duration\", duration)\n\n    def record_failure(self, tool_name: str, error: str):\n        self.failure_count += 1\n        export_metric(f\"tool.{tool_name}.failure\", 1)\n        export_metric(f\"tool.{tool_name}.error\", error)\n</code></pre>"},{"location":"architecture/tools/#creating-custom-tools","title":"Creating Custom Tools","text":""},{"location":"architecture/tools/#tool-development-guide","title":"Tool Development Guide","text":"<ol> <li>Implement BaseTool Interface:</li> </ol> <pre><code>class CustomTool(BaseTool):\n    @property\n    def name(self) -&gt; str:\n        return \"custom_tool\"\n\n    @property\n    def description(self) -&gt; str:\n        return \"Description of what this tool does\"\n\n    async def execute(self, **kwargs) -&gt; Any:\n        # Tool implementation\n        return {\"result\": \"success\"}\n</code></pre> <ol> <li>Register the Tool:</li> </ol> <pre><code># In tool initialization\nregistry.register(CustomTool())\n</code></pre> <ol> <li>Test the Tool:</li> </ol> <pre><code>@pytest.mark.asyncio\nasync def test_custom_tool():\n    tool = CustomTool()\n    result = await tool.execute(param1=\"value1\")\n    assert result[\"result\"] == \"success\"\n</code></pre>"},{"location":"architecture/tools/#configuration","title":"Configuration","text":""},{"location":"architecture/tools/#tool-configuration-file","title":"Tool Configuration File","text":"<pre><code>tools:\n  web_search:\n    enabled: true\n    searx_url: \"http://localhost:8080\"\n    timeout: 30\n    max_results: 5\n\n  knowledge_search:\n    enabled: true\n    vector_db_url: \"postgresql://localhost:5432/rag_db\"\n    embedding_model: \"sentence-transformers/all-MiniLM-L6-v2\"\n\n  calculator:\n    enabled: true\n    precision: 10\n</code></pre>"},{"location":"architecture/tools/#environment-based-configuration","title":"Environment-Based Configuration","text":"<pre><code>class ToolConfig:\n    def __init__(self):\n        self.web_search_enabled = os.getenv(\"WEB_SEARCH_ENABLED\", \"true\").lower() == \"true\"\n        self.searx_url = os.getenv(\"SEARX_URL\")\n        self.rag_enabled = os.getenv(\"RAG_ENABLED\", \"false\").lower() == \"true\"\n        self.vector_db_url = os.getenv(\"VECTOR_DB_URL\")\n</code></pre>"},{"location":"architecture/tools/#related-documentation","title":"Related Documentation","text":"<ul> <li>System Architecture Overview</li> <li>Agent Workflow</li> <li>API Endpoints Reference</li> <li>SearX Integration</li> <li>RAG System</li> </ul> <p>This tool system provides a robust, extensible foundation for adding capabilities to the AI assistant while maintaining security, performance, and reliability.</p>"},{"location":"architecture/workflow/","title":"Agent Workflow","text":"<p>This document describes the workflow and decision-making process of the AI agent, including how it processes requests, decides when to use tools, and generates responses.</p>"},{"location":"architecture/workflow/#workflow-overview","title":"Workflow Overview","text":"<p>The agent follows a structured workflow to handle user requests:</p> <pre><code>User Request\n     \u2193\nMessage Processing\n     \u2193\nIntent Analysis\n     \u2193\nTool Selection (if needed)\n     \u2193\nTool Execution (if applicable)\n     \u2193\nContext Augmentation\n     \u2193\nResponse Generation\n     \u2193\nResponse Formatting\n     \u2193\nUser Response\n</code></pre>"},{"location":"architecture/workflow/#detailed-workflow-steps","title":"Detailed Workflow Steps","text":""},{"location":"architecture/workflow/#1-message-processing","title":"1. Message Processing","text":"<p>Input: User message in OpenAI-compatible format</p> <p>Processing:</p> <pre><code># Convert OpenAI messages to LangChain format\ndef process_messages(messages: List[OpenAIMessage]) -&gt; List[LangChainMessage]:\n    langchain_messages = []\n    for msg in messages:\n        if msg.role == \"user\":\n            langchain_messages.append(HumanMessage(content=msg.content))\n        elif msg.role == \"assistant\":\n            langchain_messages.append(AIMessage(content=msg.content))\n        elif msg.role == \"system\":\n            langchain_messages.append(SystemMessage(content=msg.content))\n    return langchain_messages\n</code></pre> <p>Output: LangChain-compatible message sequence</p>"},{"location":"architecture/workflow/#2-intent-analysis","title":"2. Intent Analysis","text":"<p>The agent analyzes the user's intent to determine if tools are needed:</p> <p>Decision Factors: - Query specificity: Specific questions often need tools - Temporal relevance: Current events require web search - Domain knowledge: Specialized topics may need RAG - Conversation context: Previous tool usage patterns</p> <p>Example Decision Logic:</p> <pre><code>def needs_tools(messages: List[LangChainMessage]) -&gt; bool:\n    last_message = messages[-1].content.lower()\n\n    # Patterns that indicate tool need\n    tool_patterns = [\n        \"current\", \"recent\", \"latest\",\n        \"search\", \"find\", \"look up\",\n        \"what's new\", \"update on\",\n        \"how to\", \"tutorial\", \"guide\"\n    ]\n\n    return any(pattern in last_message for pattern in tool_patterns)\n</code></pre>"},{"location":"architecture/workflow/#3-tool-selection","title":"3. Tool Selection","text":"<p>If tools are needed, the agent selects the appropriate tool:</p> <p>Tool Selection Criteria: - Relevance: How well the tool matches the query - Capability: What information the tool can provide - Performance: Tool response time and reliability - Cost: Resource usage considerations</p> <p>Available Tools: - Web Search (SearX): For current information, news, real-time data - RAG System: For document-based knowledge, specific content - Calculator: For mathematical computations (planned) - Code Execution: For code-related queries (planned)</p>"},{"location":"architecture/workflow/#4-tool-execution","title":"4. Tool Execution","text":"<p>Sequential Execution:</p> <pre><code>async def execute_tools(query: str, selected_tools: List[Tool]) -&gt; Dict[str, Any]:\n    results = {}\n    for tool in selected_tools:\n        try:\n            results[tool.name] = await tool.execute(query)\n        except ToolError as e:\n            logger.warning(f\"Tool {tool.name} failed: {e}\")\n            results[tool.name] = None\n    return results\n</code></pre> <p>Parallel Execution (for independent tools):</p> <pre><code>async def execute_tools_parallel(query: str, tools: List[Tool]) -&gt; Dict[str, Any]:\n    tasks = {tool.name: tool.execute(query) for tool in tools}\n    results = await asyncio.gather(*tasks.values(), return_exceptions=True)\n    return dict(zip(tasks.keys(), results))\n</code></pre>"},{"location":"architecture/workflow/#5-context-augmentation","title":"5. Context Augmentation","text":"<p>The agent combines tool results with the original conversation:</p> <p>Context Building:</p> <pre><code>def build_augmented_context(original_messages: List[Message], tool_results: Dict) -&gt; str:\n    context = \"Conversation history:\\n\"\n    for msg in original_messages:\n        context += f\"{msg.role}: {msg.content}\\n\"\n\n    context += \"\\nTool results:\\n\"\n    for tool_name, result in tool_results.items():\n        if result:\n            context += f\"{tool_name}: {result}\\n\"\n\n    return context\n</code></pre>"},{"location":"architecture/workflow/#6-response-generation","title":"6. Response Generation","text":"<p>The LLM generates a response using the augmented context:</p> <p>Prompt Construction:</p> <pre><code>def build_response_prompt(user_query: str, context: str) -&gt; str:\n    return f\"\"\"\nYou are a helpful AI assistant with access to various tools.\n\nContext information:\n{context}\n\nUser question: {user_query}\n\nPlease provide a helpful response based on the available information.\nIf you used tools, mention the sources appropriately.\n\"\"\"\n</code></pre>"},{"location":"architecture/workflow/#7-response-formatting","title":"7. Response Formatting","text":"<p>The response is formatted according to OpenAI's specification:</p> <p>Formatting:</p> <pre><code>def format_openai_response(content: str, model: str) -&gt; OpenAIRresponse:\n    return {\n        \"id\": f\"chatcmpl-{generate_id()}\",\n        \"object\": \"chat.completion\",\n        \"model\": model,\n        \"choices\": [\n            {\n                \"index\": 0,\n                \"message\": {\n                    \"role\": \"assistant\",\n                    \"content\": content\n                },\n                \"finish_reason\": \"stop\"\n            }\n        ]\n    }\n</code></pre>"},{"location":"architecture/workflow/#streaming-workflow","title":"Streaming Workflow","text":"<p>For streaming responses, the workflow is similar but with incremental delivery:</p>"},{"location":"architecture/workflow/#streaming-steps","title":"Streaming Steps","text":"<ol> <li>Initial processing: Same as non-streaming</li> <li>Tool execution: Tools run before streaming starts</li> <li>Incremental generation: LLM generates response in chunks</li> <li>Real-time delivery: Chunks are sent as they're generated</li> </ol>"},{"location":"architecture/workflow/#streaming-implementation","title":"Streaming Implementation","text":"<pre><code>async def stream_response(messages: List[Message], tools: List[Tool]):\n    # Process messages and execute tools\n    processed_messages = process_messages(messages)\n    tool_results = await execute_tools_if_needed(processed_messages)\n    context = build_context(processed_messages, tool_results)\n\n    # Stream LLM response\n    async for chunk in llm.stream(context):\n        yield format_streaming_chunk(chunk)\n</code></pre>"},{"location":"architecture/workflow/#error-handling-workflow","title":"Error Handling Workflow","text":""},{"location":"architecture/workflow/#tool-failure-handling","title":"Tool Failure Handling","text":"<pre><code>async def handle_tool_failure(tool_name: str, error: Exception) -&gt; str:\n    if isinstance(error, TimeoutError):\n        return f\"The {tool_name} tool timed out. Please try again.\"\n    elif isinstance(error, ConnectionError):\n        return f\"The {tool_name} service is currently unavailable.\"\n    else:\n        return f\"An error occurred with the {tool_name} tool.\"\n</code></pre>"},{"location":"architecture/workflow/#fallback-strategies","title":"Fallback Strategies","text":"<ol> <li>Tool-specific fallbacks: Use alternative tools</li> <li>Cached results: Return recently cached data</li> <li>LLM knowledge: Rely on the model's training data</li> <li>Error transparency: Inform the user about limitations</li> </ol>"},{"location":"architecture/workflow/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/workflow/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Tool results: Cache frequent queries for 5 minutes</li> <li>Embeddings: Cache computed embeddings</li> <li>LLM responses: Cache identical prompts (with caution)</li> </ul>"},{"location":"architecture/workflow/#parallel-execution","title":"Parallel Execution","text":"<ul> <li>Independent tools run concurrently</li> <li>Batch processing for multiple queries</li> <li>Connection pooling for external APIs</li> </ul>"},{"location":"architecture/workflow/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"architecture/workflow/#key-metrics","title":"Key Metrics","text":"<ul> <li>Response time: End-to-end processing time</li> <li>Tool usage: Which tools are used and how often</li> <li>Error rates: Tool failure rates and types</li> <li>User satisfaction: Implicit feedback from usage patterns</li> </ul>"},{"location":"architecture/workflow/#logging-structure","title":"Logging Structure","text":"<pre><code>{\n    \"request_id\": \"unique-id\",\n    \"user_query\": \"original query\",\n    \"tools_used\": [\"tool1\", \"tool2\"],\n    \"tool_results\": {\"tool1\": \"summary\"},\n    \"response_time\": 2.5,\n    \"error\": null\n}\n</code></pre>"},{"location":"architecture/workflow/#example-workflow-scenarios","title":"Example Workflow Scenarios","text":""},{"location":"architecture/workflow/#scenario-1-simple-question","title":"Scenario 1: Simple Question","text":"<pre><code>User: \"What is the capital of France?\"\n\nWorkflow:\n1. Message processing \u2192 Convert to LangChain format\n2. Intent analysis \u2192 No tools needed (common knowledge)\n3. Response generation \u2192 Use LLM knowledge\n4. Response formatting \u2192 Return answer\n\nResult: \"The capital of France is Paris.\"\n</code></pre>"},{"location":"architecture/workflow/#scenario-2-current-information","title":"Scenario 2: Current Information","text":"<pre><code>User: \"What are the latest developments in AI?\"\n\nWorkflow:\n1. Message processing \u2192 Convert to LangChain format\n2. Intent analysis \u2192 Tools needed (current information)\n3. Tool selection \u2192 Web search (SearX)\n4. Tool execution \u2192 Search for recent AI news\n5. Context augmentation \u2192 Combine search results with query\n6. Response generation \u2192 Generate informed response\n7. Response formatting \u2192 Return with citations\n\nResult: \"Based on recent news, the latest developments include...\"\n</code></pre>"},{"location":"architecture/workflow/#scenario-3-document-based-query","title":"Scenario 3: Document-Based Query","text":"<pre><code>User: \"What does our project documentation say about security?\"\n\nWorkflow:\n1. Message processing \u2192 Convert to LangChain format\n2. Intent analysis \u2192 Tools needed (specific documents)\n3. Tool selection \u2192 RAG system\n4. Tool execution \u2192 Search project documentation\n5. Context augmentation \u2192 Combine relevant document sections\n6. Response generation \u2192 Generate security overview\n7. Response formatting \u2192 Return with document references\n\nResult: \"According to our documentation, security measures include...\"\n</code></pre>"},{"location":"architecture/workflow/#customization-points","title":"Customization Points","text":""},{"location":"architecture/workflow/#tool-selection-logic","title":"Tool Selection Logic","text":"<p>Override the default tool selection algorithm for specific use cases.</p>"},{"location":"architecture/workflow/#response-formatting","title":"Response Formatting","text":"<p>Customize how responses are formatted for different clients.</p>"},{"location":"architecture/workflow/#error-handling","title":"Error Handling","text":"<p>Implement domain-specific error handling strategies.</p>"},{"location":"architecture/workflow/#caching-strategy_1","title":"Caching Strategy","text":"<p>Adjust caching parameters based on data freshness requirements.</p>"},{"location":"architecture/workflow/#related-documentation","title":"Related Documentation","text":"<ul> <li>System Architecture Overview</li> <li>Tool System Design</li> <li>API Endpoints Reference</li> <li>Development Setup Guide</li> </ul> <p>This workflow provides a flexible yet structured approach to handling user requests, ensuring that the AI assistant can effectively leverage tools when needed while maintaining fast response times for simple queries.</p>"},{"location":"development/branch-protection/","title":"Branch Protection Guide","text":"<p>This guide explains the branch protection rules configured for the AI Assistant project and how they affect the development workflow.</p>"},{"location":"development/branch-protection/#overview","title":"Overview","text":"<p>Branch protection rules are configured to maintain code quality, prevent accidental changes to critical branches, and ensure that all changes are properly reviewed and tested.</p>"},{"location":"development/branch-protection/#protected-branches","title":"Protected Branches","text":""},{"location":"development/branch-protection/#main-branch-main","title":"Main Branch (<code>main</code>)","text":"<ul> <li>Purpose: Production-ready code</li> <li>Protection Level: Highest</li> <li>Rules: </li> <li>Require pull requests for changes</li> <li>Require code reviews</li> <li>Require status checks to pass</li> <li>Require linear history</li> <li>Restrict force pushes</li> </ul>"},{"location":"development/branch-protection/#development-branch-develop","title":"Development Branch (<code>develop</code>)","text":"<ul> <li>Purpose: Integration and testing branch</li> <li>Protection Level: High</li> <li>Rules:</li> <li>Require pull requests for changes</li> <li>Require code reviews</li> <li>Require status checks to pass</li> <li>Allow squash merging</li> </ul>"},{"location":"development/branch-protection/#branch-protection-rules","title":"Branch Protection Rules","text":""},{"location":"development/branch-protection/#required-status-checks","title":"Required Status Checks","text":"<p>The following status checks must pass before merging:</p>"},{"location":"development/branch-protection/#code-quality-checks","title":"Code Quality Checks","text":"<ul> <li><code>black</code>: Code formatting check</li> <li><code>ruff</code>: Linting and style enforcement</li> <li><code>mypy</code>: Type checking</li> <li><code>bandit</code>: Security scanning</li> <li><code>pip-audit</code>: Dependency vulnerability checking</li> </ul>"},{"location":"development/branch-protection/#testing-checks","title":"Testing Checks","text":"<ul> <li><code>pytest</code>: Unit and integration tests</li> <li><code>coverage</code>: Test coverage threshold (minimum 80%)</li> <li><code>integration-tests</code>: End-to-end integration tests</li> </ul>"},{"location":"development/branch-protection/#build-checks","title":"Build Checks","text":"<ul> <li><code>build</code>: Package build verification</li> <li><code>docs-build</code>: Documentation build verification</li> </ul>"},{"location":"development/branch-protection/#required-reviews","title":"Required Reviews","text":""},{"location":"development/branch-protection/#review-requirements","title":"Review Requirements","text":"<ul> <li>At least 1 approved review from code owners</li> <li>No changes requested reviews blocking merge</li> <li>Reviews from code owners for specific file changes</li> </ul>"},{"location":"development/branch-protection/#code-owners","title":"Code Owners","text":"<p>The <code>.github/CODEOWNERS</code> file defines code ownership:</p> <pre><code># Core application code\n/app/ @jsieber7 @core-maintainers\n\n# Documentation\n/docs/ @jsieber7 @documentation-maintainers\n\n# GitHub Actions workflows\n/.github/workflows/ @jsieber7 @devops-maintainers\n</code></pre>"},{"location":"development/branch-protection/#merge-restrictions","title":"Merge Restrictions","text":""},{"location":"development/branch-protection/#merge-methods","title":"Merge Methods","text":"<ul> <li>Squash and Merge: Preferred for feature branches</li> <li>Rebase and Merge: Allowed for maintainers</li> <li>Merge Commit: Restricted to specific circumstances</li> </ul>"},{"location":"development/branch-protection/#commit-requirements","title":"Commit Requirements","text":"<ul> <li>Signed commits: Recommended but not required</li> <li>Conventional commits: Encouraged for better changelog generation</li> <li>Descriptive messages: Required for all commits</li> </ul>"},{"location":"development/branch-protection/#development-workflow-with-branch-protection","title":"Development Workflow with Branch Protection","text":""},{"location":"development/branch-protection/#standard-feature-development","title":"Standard Feature Development","text":"<ol> <li> <p>Create Feature Branch:    <code>bash    git checkout -b feature/your-feature-name</code></p> </li> <li> <p>Make Changes and Test:    ```bash    # Run tests locally    python run_tests.py --coverage</p> </li> </ol> <p># Format code    uv run black .    uv run ruff check .    ```</p> <ol> <li> <p>Push and Create PR:    <code>bash    git push origin feature/your-feature-name    # Then create PR on GitHub</code></p> </li> <li> <p>Address Review Feedback:</p> </li> <li>Make requested changes</li> <li>Push updates to the same branch</li> <li> <p>Re-request review when ready</p> </li> <li> <p>Wait for Checks:</p> </li> <li>GitHub Actions will run automatically</li> <li>All checks must pass (green \u2713)</li> <li> <p>Fix any failing checks</p> </li> <li> <p>Merge:</p> </li> <li>Once approved and checks pass</li> <li>Use \"Squash and Merge\" for feature branches</li> <li>Delete the feature branch after merge</li> </ol>"},{"location":"development/branch-protection/#hotfix-workflow","title":"Hotfix Workflow","text":"<p>For critical bug fixes:</p> <ol> <li> <p>Create Hotfix Branch:    <code>bash    git checkout -b hotfix/issue-description main</code></p> </li> <li> <p>Follow Standard Process:</p> </li> <li>Same testing and review requirements</li> <li> <p>Expedited review process for critical fixes</p> </li> <li> <p>Merge to Main and Develop:</p> </li> <li>Merge hotfix to <code>main</code></li> <li>Then merge <code>main</code> to <code>develop</code> to sync</li> </ol>"},{"location":"development/branch-protection/#release-process","title":"Release Process","text":"<ol> <li> <p>Create Release Branch:    <code>bash    git checkout -b release/v1.2.0 develop</code></p> </li> <li> <p>Final Testing:</p> </li> <li>Run extended test suite</li> <li>Update version in <code>pyproject.toml</code></li> <li> <p>Update changelog</p> </li> <li> <p>Merge to Main:</p> </li> <li>PR from <code>release/*</code> to <code>main</code></li> <li> <p>Tag release after merge</p> </li> <li> <p>Sync to Develop:</p> </li> <li>Merge <code>main</code> back to <code>develop</code></li> </ol>"},{"location":"development/branch-protection/#bypassing-branch-protection","title":"Bypassing Branch Protection","text":""},{"location":"development/branch-protection/#when-bypass-is-allowed","title":"When Bypass is Allowed","text":"<p>Never for external contributors Rarely for maintainers in specific circumstances:</p> <ul> <li>Emergency security fixes</li> <li>CI/CD pipeline failures</li> <li>Infrastructure emergencies</li> </ul>"},{"location":"development/branch-protection/#bypass-procedure","title":"Bypass Procedure","text":"<ol> <li>Get approval from project lead</li> <li>Document the reason in the commit message</li> <li>Notify the team about the bypass</li> <li>Follow up with proper PR and review post-emergency</li> </ol>"},{"location":"development/branch-protection/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"development/branch-protection/#failing-status-checks","title":"Failing Status Checks","text":""},{"location":"development/branch-protection/#code-formatting-issues","title":"Code Formatting Issues","text":"<pre><code># Fix formatting\nuv run black .\n\n# Fix linting\nuv run ruff check --fix\n</code></pre>"},{"location":"development/branch-protection/#test-failures","title":"Test Failures","text":"<ul> <li>Run tests locally to reproduce: <code>python run_tests.py</code></li> <li>Check test logs for specific failure details</li> <li>Update tests if functionality changed</li> </ul>"},{"location":"development/branch-protection/#type-checking-errors","title":"Type Checking Errors","text":"<ul> <li>Fix type annotations</li> <li>Use <code># type: ignore</code> sparingly with explanation</li> <li>Update type stubs if needed</li> </ul>"},{"location":"development/branch-protection/#review-stuck","title":"Review Stuck","text":""},{"location":"development/branch-protection/#no-reviewers-available","title":"No Reviewers Available","text":"<ul> <li>Ping the team in PR comments</li> <li>Use <code>@</code> mentions for specific code owners</li> <li>Consider adding more reviewers to CODEOWNERS</li> </ul>"},{"location":"development/branch-protection/#review-requests-changes","title":"Review Requests Changes","text":"<ul> <li>Address all review comments</li> <li>Request re-review when changes are made</li> <li>Discuss alternative approaches if needed</li> </ul>"},{"location":"development/branch-protection/#merge-conflicts","title":"Merge Conflicts","text":""},{"location":"development/branch-protection/#resolving-conflicts","title":"Resolving Conflicts","text":"<pre><code># Update your branch\ngit fetch origin\ngit rebase origin/main  # or origin/develop\n\n# Resolve conflicts\n# Then continue rebase\ngit add .\ngit rebase --continue\n</code></pre>"},{"location":"development/branch-protection/#preventing-conflicts","title":"Preventing Conflicts","text":"<ul> <li>Keep branches short-lived</li> <li>Regularly sync with base branch</li> <li>Communicate with team about overlapping changes</li> </ul>"},{"location":"development/branch-protection/#best-practices","title":"Best Practices","text":""},{"location":"development/branch-protection/#branch-naming","title":"Branch Naming","text":"<ul> <li>Use descriptive names: <code>feature/user-auth</code>, <code>fix/api-timeout</code></li> <li>Follow convention: <code>type/description</code></li> <li>Avoid generic names: <code>update</code>, <code>fix</code>, <code>patch</code></li> </ul>"},{"location":"development/branch-protection/#commit-messages","title":"Commit Messages","text":"<ul> <li>Use conventional commit format</li> <li>Reference issue numbers: <code>Closes #123</code></li> <li>Be descriptive but concise</li> </ul>"},{"location":"development/branch-protection/#pr-management","title":"PR Management","text":"<ul> <li>Keep PRs focused and small</li> <li>Use draft PRs for work in progress</li> <li>Request reviews when ready</li> <li>Respond promptly to review feedback</li> </ul>"},{"location":"development/branch-protection/#monitoring-and-enforcement","title":"Monitoring and Enforcement","text":""},{"location":"development/branch-protection/#compliance-monitoring","title":"Compliance Monitoring","text":"<ul> <li>Regular audits of merge history</li> <li>Review of bypass instances</li> <li>Team training on branch protection</li> </ul>"},{"location":"development/branch-protection/#violation-handling","title":"Violation Handling","text":"<ul> <li>Education for first-time violations</li> <li>Escalation for repeated violations</li> <li>Temporary access restrictions if needed</li> </ul>"},{"location":"development/branch-protection/#tools-and-automation","title":"Tools and Automation","text":""},{"location":"development/branch-protection/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>The project uses GitHub Actions to automate: - Code quality checks - Testing and coverage - Security scanning - Documentation building</p>"},{"location":"development/branch-protection/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Local pre-commit hooks can prevent common issues:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n      - id: black\n  - repo: https://github.com/charliermarsh/ruff\n    rev: v0.0.260\n    hooks:\n      - id: ruff\n</code></pre>"},{"location":"development/branch-protection/#ide-integration","title":"IDE Integration","text":"<p>Configure your IDE to help with compliance: - Auto-format on save - Linting in real-time - Type checking integration</p>"},{"location":"development/branch-protection/#training-and-resources","title":"Training and Resources","text":""},{"location":"development/branch-protection/#learning-resources","title":"Learning Resources","text":"<ul> <li>GitHub Branch Protection Documentation</li> <li>Conventional Commits Specification</li> <li>Code Review Best Practices</li> </ul>"},{"location":"development/branch-protection/#team-training","title":"Team Training","text":"<ul> <li>Regular workshops on Git workflows</li> <li>Code review practice sessions</li> <li>Branch protection rule discussions</li> </ul>"},{"location":"development/branch-protection/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/branch-protection/#common-error-messages","title":"Common Error Messages","text":""},{"location":"development/branch-protection/#required-status-check-expected","title":"\"Required status check expected\"","text":"<ul> <li>Wait for all checks to complete</li> <li>Check if any checks are stuck</li> <li>Re-run failed checks if appropriate</li> </ul>"},{"location":"development/branch-protection/#review-required","title":"\"Review required\"","text":"<ul> <li>Ensure at least one approved review</li> <li>Check if reviewer has required permissions</li> <li>Request review from code owners</li> </ul>"},{"location":"development/branch-protection/#merge-conflict","title":"\"Merge conflict\"","text":"<ul> <li>Resolve conflicts locally</li> <li>Push resolved changes</li> <li>Request re-review if needed</li> </ul>"},{"location":"development/branch-protection/#getting-help","title":"Getting Help","text":""},{"location":"development/branch-protection/#internal-support","title":"Internal Support","text":"<ul> <li>Contact project maintainers</li> <li>Use team communication channels</li> <li>Reference this documentation</li> </ul>"},{"location":"development/branch-protection/#external-resources","title":"External Resources","text":"<ul> <li>GitHub documentation</li> <li>Community forums</li> <li>Professional training resources</li> </ul>"},{"location":"development/branch-protection/#continuous-improvement","title":"Continuous Improvement","text":""},{"location":"development/branch-protection/#feedback-collection","title":"Feedback Collection","text":"<ul> <li>Regular team feedback on branch protection</li> <li>Survey developers about pain points</li> <li>Monitor metrics on PR cycle time</li> </ul>"},{"location":"development/branch-protection/#rule-updates","title":"Rule Updates","text":"<ul> <li>Review and update rules quarterly</li> <li>Adapt to team size and project maturity</li> <li>Balance protection with developer productivity</li> </ul>"},{"location":"development/branch-protection/#process-refinement","title":"Process Refinement","text":"<ul> <li>Streamline review processes</li> <li>Automate repetitive tasks</li> <li>Improve documentation and training</li> </ul>"},{"location":"development/branch-protection/#related-documentation","title":"Related Documentation","text":"<ul> <li>Contributing Guide</li> <li>Development Setup</li> <li>GitHub Actions Workflows</li> <li>Code Owners File</li> </ul> <p>This branch protection guide helps maintain code quality while enabling efficient collaboration. Follow these guidelines to ensure smooth development workflows.</p>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>Currently, no contributions will be accepted. What follows is an example of the final version.</p> <p>Thank you for your interest in contributing to the AI Assistant project! This guide will help you get started with contributing code, documentation, and ideas.</p>"},{"location":"development/contributing/#how-to-contribute","title":"\ud83c\udfaf How to Contribute","text":""},{"location":"development/contributing/#types-of-contributions","title":"Types of Contributions","text":"<ul> <li>Code: Bug fixes, new features, performance improvements</li> <li>Documentation: Tutorials, API docs, architecture guides</li> <li>Testing: New test cases, test infrastructure improvements</li> <li>Tools: New tool integrations, tool improvements</li> <li>Examples: Usage examples, integration guides</li> </ul>"},{"location":"development/contributing/#contribution-process","title":"\ud83d\udccb Contribution Process","text":""},{"location":"development/contributing/#1-pre-contribution-checklist","title":"1. Pre-Contribution Checklist","text":"<ul> <li>[ ] Read this contributing guide</li> <li>[ ] Check existing issues and pull requests</li> <li>[ ] Ensure you have Astral UV installed</li> <li>[ ] Set up the development environment</li> </ul>"},{"location":"development/contributing/#2-development-setup","title":"2. Development Setup","text":"<pre><code># Fork and clone the repository\ngit clone https://github.com/jSieber7/ai_assistant.git\ncd ai_assistant\n\n# Set up development environment\ncp .env.template .env\nuv venv .venv\nuv sync --dev\n</code></pre>"},{"location":"development/contributing/#3-making-changes","title":"3. Making Changes","text":"<pre><code># Create a feature branch\ngit checkout -b feature/your-feature-name\n\n# Make your changes\n# Test your changes\nuv run run_tests.py --coverage\n\n# Format and lint your code\nuv run black .\nuv run ruff check .\nuv run mypy app/\n</code></pre>"},{"location":"development/contributing/#4-submitting-changes","title":"4. Submitting Changes","text":"<pre><code># Commit with descriptive message\ngit add .\ngit commit -m \"feat: add new tool integration\"\n\n# Push to your fork\ngit push origin feature/your-feature-name\n\n# Create a pull request on GitHub\n</code></pre>"},{"location":"development/contributing/#code-standards","title":"\ud83c\udfd7\ufe0f Code Standards","text":""},{"location":"development/contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Follow code formatting guidelines of black, ruff, and mypy</li> <li>Use type hints for all function parameters and returns</li> <li>Write docstrings for all public functions and classes</li> <li>Use descriptive variable and function names</li> </ul>"},{"location":"development/contributing/#code-quality-tools","title":"Code Quality Tools","text":"<p>The project uses several automated tools:</p> <pre><code># Format code (automatically fixes style issues)\nuv run black .\n\n# Check code style\nuv run ruff check .\n\n# Type checking\nuv run mypy app/\n\n# Security scanning\nuv run bandit -r app/\nuv run pip-audit\n</code></pre>"},{"location":"development/contributing/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>Write tests for all new functionality</li> <li>Maintain or improve test coverage</li> <li>Include both unit tests and integration tests</li> <li>Test edge cases and error conditions</li> </ul>"},{"location":"development/contributing/#documentation-standards","title":"\ud83d\udcdd Documentation Standards","text":""},{"location":"development/contributing/#api-documentation","title":"API Documentation","text":"<ul> <li>Update API documentation for new endpoints</li> <li>Include request/response examples</li> <li>Document error conditions and status codes</li> </ul>"},{"location":"development/contributing/#tool-documentation","title":"Tool Documentation","text":"<ul> <li>Document new tools with usage examples</li> <li>Include configuration instructions</li> <li>Provide troubleshooting guides</li> </ul>"},{"location":"development/contributing/#architecture-documentation","title":"Architecture Documentation","text":"<ul> <li>Update architecture diagrams for significant changes</li> <li>Document design decisions and trade-offs</li> </ul>"},{"location":"development/contributing/#development-workflow","title":"\ud83d\udd27 Development Workflow","text":""},{"location":"development/contributing/#branch-naming-convention","title":"Branch Naming Convention","text":"<ul> <li><code>feature/feature-name</code>: New features</li> <li><code>fix/bug-description</code>: Bug fixes</li> <li><code>docs/documentation-topic</code>: Documentation improvements</li> <li><code>refactor/component-name</code>: Code refactoring</li> </ul>"},{"location":"development/contributing/#commit-message-format","title":"Commit Message Format","text":"<pre><code>type: description\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes (formatting, etc.) - <code>refactor</code>: Code refactoring - <code>test</code>: Adding or modifying tests - <code>chore</code>: Maintenance tasks</p> <p>Examples:</p> <pre><code>feat: add web search tool integration\n\n- Implement SearX integration\n- Add tool selection logic\n- Include error handling\n\nCloses #123\n</code></pre>"},{"location":"development/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before submitting a PR: - [ ] Tests pass locally - [ ] Code follows style guidelines - [ ] Documentation is updated - [ ] Branch is up to date with main - [ ] Commit messages follow convention</p> <p>PR Description Template:</p> <pre><code>## Description\nBrief description of the changes\n\n## Changes Made\n- Change 1\n- Change 2\n- Change 3\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests pass\n- [ ] Manual testing performed\n\n## Related Issues\nCloses #123, Fixes #456\n\n## Screenshots (if applicable)\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"\ud83e\uddea Testing Guidelines","text":""},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<pre><code>def test_new_feature():\n    \"\"\"Test descriptive name for the test.\"\"\"\n    # Arrange - set up test conditions\n    test_input = \"test data\"\n\n    # Act - perform the action being tested\n    result = function_under_test(test_input)\n\n    # Assert - verify the outcome\n    assert result == expected_output\n\n@pytest.mark.asyncio\nasync def test_async_feature():\n    \"\"\"Test async functionality.\"\"\"\n    result = await async_function()\n    assert result is not None\n</code></pre>"},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<ul> <li>Unit tests: Test individual components in isolation</li> <li>Integration tests: Test interactions between components</li> <li>Performance tests: Test response times and resource usage</li> <li>Error handling tests: Test failure scenarios</li> </ul>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npython run_tests.py\n\n# Run with coverage\npython run_tests.py --coverage\n\n# Run specific test types\npython run_tests.py --unit\npython run_tests.py --integration\n\n# Run tests in parallel\npython run_tests.py --parallel\n</code></pre>"},{"location":"development/contributing/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":""},{"location":"development/contributing/#secure-development-practices","title":"Secure Development Practices","text":"<ul> <li>Never hardcode API keys or secrets</li> <li>Validate all user input</li> <li>Use environment variables for configuration</li> <li>Follow principle of least privilege</li> </ul>"},{"location":"development/contributing/#security-testing","title":"Security Testing","text":"<ul> <li>Run security scans before submitting PRs</li> <li>Test for common vulnerabilities (SQL injection, XSS, etc.)</li> <li>Verify authentication and authorization logic</li> </ul>"},{"location":"development/contributing/#feature-development","title":"\ud83d\ude80 Feature Development","text":""},{"location":"development/contributing/#adding-new-tools","title":"Adding New Tools","text":"<ol> <li>Design the tool interface</li> <li>Implement the tool functionality</li> <li>Write comprehensive tests</li> <li>Document the tool usage</li> <li>Integrate with the agent system</li> </ol>"},{"location":"development/contributing/#adding-api-endpoints","title":"Adding API Endpoints","text":"<ol> <li>Design the endpoint specification</li> <li>Implement the route handler</li> <li>Add request/response models</li> <li>Write endpoint tests</li> <li>Update API documentation</li> </ol>"},{"location":"development/contributing/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Optimize for low latency</li> <li>Use async/await for I/O operations</li> <li>Implement caching where appropriate</li> <li>Monitor resource usage</li> </ul>"},{"location":"development/contributing/#community-guidelines","title":"\ud83e\udd1d Community Guidelines","text":""},{"location":"development/contributing/#communication","title":"Communication","text":"<ul> <li>Be respectful</li> <li>Provide constructive feedback</li> <li>Assume good intentions</li> <li>Help others learn and grow</li> </ul>"},{"location":"development/contributing/#issue-reporting","title":"Issue Reporting","text":"<p>When reporting issues, include: - Description: What happened vs. what you expected - Steps to reproduce: Clear reproduction steps - Environment: OS, Python version, dependencies - Logs: Relevant error messages and logs</p>"},{"location":"development/contributing/#asking-for-help","title":"Asking for Help","text":"<ul> <li>Search existing issues and documentation first</li> <li>Provide context and what you've tried</li> <li>Be specific about what you need help with</li> </ul>"},{"location":"development/contributing/#code-review-process","title":"\ud83d\udcca Code Review Process","text":""},{"location":"development/contributing/#review-guidelines","title":"Review Guidelines","text":"<ul> <li>Focus on code quality and functionality</li> <li>Check for security issues</li> <li>Verify tests are adequate</li> <li>Ensure documentation is updated</li> <li>Suggest improvements constructively</li> </ul>"},{"location":"development/contributing/#review-response","title":"Review Response","text":"<ul> <li>Address all review comments</li> <li>Explain your design decisions if needed</li> <li>Make requested changes or discuss alternatives</li> <li>Thank reviewers for their time</li> </ul>"},{"location":"development/contributing/#recognition","title":"\ud83c\udf81 Recognition","text":""},{"location":"development/contributing/#contributor-recognition","title":"Contributor Recognition","text":"<ul> <li>Contributors are credited in the README</li> <li>Significant contributions are highlighted in release notes</li> <li>All contributors are appreciated and valued</li> </ul>"},{"location":"development/contributing/#becoming-a-maintainer","title":"Becoming a Maintainer","text":"<p>Consistent, high-quality contributors may be invited to become maintainers. Maintainers have additional responsibilities: - Review and merge pull requests - Triage issues - Help guide project direction - Mentor new contributors</p>"},{"location":"development/contributing/#getting-help","title":"\u2753 Getting Help","text":""},{"location":"development/contributing/#resources","title":"Resources","text":"<ul> <li>Documentation</li> <li>GitHub Issues</li> <li>Discussion Forum</li> </ul>"},{"location":"development/contributing/#contact","title":"Contact","text":"<ul> <li>Create a GitHub issue for bug reports and feature requests</li> <li>Use GitHub discussions for questions and ideas</li> <li>Follow the project for updates and announcements</li> </ul>"},{"location":"development/contributing/#license","title":"\ud83d\udcc4 License","text":"<p>By contributing, you agree that your contributions will be licensed under the project's open source license.</p>"},{"location":"development/contributing/#thank-you","title":"\ud83d\ude4f Thank You!","text":"<p>Thank you for considering contributing to the AI Assistant project. Your contributions help make this project better for everyone. We appreciate your time, effort, and expertise.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"development/security-and-api-key-handling/","title":"Security and API Key Handling","text":""},{"location":"development/security-and-api-key-handling/#security-and-api-key-handling","title":"Security and API Key Handling","text":"<p>Important: Your GitHub Actions workflow is configured to never require real API keys for testing. All tests use mocked dependencies and test environment variables to ensure your OpenRouter API key is never exposed.</p> <ul> <li>Mock-Based Testing: All external API calls are mocked during testing</li> <li>No Real Secrets Required: The workflow uses test environment variables</li> <li>Secure by Design: API keys are never hardcoded or committed to version control</li> </ul> <p>For detailed security information, see SECURITY.md.</p>"},{"location":"development/security-and-api-key-handling/#workflow-features","title":"Workflow Features","text":"<ul> <li>UV Integration: Uses Astral UV for fast dependency resolution</li> <li>Caching: Automatic caching of UV dependencies for faster builds</li> <li>Multi-version Testing: Tests against Python 3.11 and 3.12</li> <li>Security Scanning: Includes bandit security scanner and pip-audit</li> <li>Code Quality: Runs ruff, black, and mypy checks</li> <li>Coverage Reporting: Generates coverage reports and uploads to Codecov</li> <li>Artifact Uploads: Saves test results and security scan reports</li> </ul>"},{"location":"development/setup/","title":"Development Setup Guide","text":"<p>This guide will help you set up the AI Assistant project for development and contribute to the project.</p>"},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":""},{"location":"development/setup/#required-software","title":"Required Software","text":"<ul> <li>Python 3.12 (required - see note below)</li> <li>UV (Python package manager)</li> <li>Git (version control)</li> </ul>"},{"location":"development/setup/#python-version-note","title":"Python Version Note","text":"<p>This project requires Python 3.12 specifically. The <code>pyproject.toml</code> enforces this version constraint. Do not use older or newer versions.</p>"},{"location":"development/setup/#quick-setup","title":"Quick Setup","text":""},{"location":"development/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/jSieber7/ai_assistant.git\ncd ai_assistant\n</code></pre>"},{"location":"development/setup/#2-set-up-environment","title":"2. Set Up Environment","text":"<pre><code># Copy environment template\ncp .env.template .env\n\n# Create virtual environment with UV\nuv venv .venv\n\n# Activate virtual environment\n# On Windows:\n.venv\\Scripts\\activate\n# On Linux/Mac:\nsource .venv/bin/activate\n\n# Install dependencies\nuv sync --dev\n</code></pre>"},{"location":"development/setup/#3-configure-environment-variables","title":"3. Configure Environment Variables","text":"<p>Edit the <code>.env</code> file with your settings:</p> <pre><code># OpenRouter API Key (required for LLM functionality)\nOPENROUTER_API_KEY=your_openrouter_api_key_here\n\n# Server settings\nHOST=127.0.0.1\nPORT=8000\nENVIRONMENT=development\nDEBUG=true\nRELOAD=true\n\n# Model settings\nDEFAULT_MODEL=anthropic/claude-3.5-sonnet\n</code></pre>"},{"location":"development/setup/#4-verify-installation","title":"4. Verify Installation","text":"<pre><code># Run tests to verify setup\npython run_tests.py --unit\n\n# Start the development server\nuvicorn app.main:app --reload\n</code></pre>"},{"location":"development/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"development/setup/#code-standards","title":"Code Standards","text":"<p>This project uses several code quality tools:</p> <pre><code># Format code with black\nuv run black .\n\n# Check code style with ruff\nuv run ruff check .\n\n# Type checking with mypy\nuv run mypy app/\n\n# Run all code quality checks\nuv run black --check . &amp;&amp; uv run ruff check . &amp;&amp; uv run mypy app/\n</code></pre>"},{"location":"development/setup/#testing","title":"Testing","text":"<p>The project includes comprehensive testing:</p> <pre><code># Run all tests\npython run_tests.py\n\n# Run with coverage\npython run_tests.py --coverage\n\n# Run specific test types\npython run_tests.py --unit\npython run_tests.py --integration\n\n# Run tests in parallel\npython run_tests.py --parallel\n</code></pre>"},{"location":"development/setup/#git-workflow","title":"Git Workflow","text":"<ol> <li> <p>Create a feature branch:    <code>bash    git checkout -b feature/your-feature-name</code></p> </li> <li> <p>Make changes and test:    <code>bash    python run_tests.py --coverage</code></p> </li> <li> <p>Commit with descriptive messages:    <code>bash    git add .    git commit -m \"feat: add new tool integration\"</code></p> </li> <li> <p>Push and create PR:    <code>bash    git push origin feature/your-feature-name</code></p> </li> </ol>"},{"location":"development/setup/#project-structure","title":"Project Structure","text":"<pre><code>ai_assistant/\n\u251c\u2500\u2500 app/                   # Application code\n\u2502   \u251c\u2500\u2500 api/               # FastAPI routes and endpoints\n\u2502   \u251c\u2500\u2500 core/              # Core functionality and configuration\n\u2502   \u2514\u2500\u2500 main.py            # FastAPI application entry point\n\u251c\u2500\u2500 tests/                 # Test suite\n\u2502   \u251c\u2500\u2500 test_main.py       # Unit tests\n\u2502   \u2514\u2500\u2500 test_integration.py # Integration tests\n\u251c\u2500\u2500 docs/                  # Documentation\n\u2502   \u251c\u2500\u2500 api/               # API documentation\n\u2502   \u251c\u2500\u2500 architecture/      # System architecture\n\u2502   \u251c\u2500\u2500 development/       # Development guides\n\u2502   \u2514\u2500\u2500 tools/             # Tool integration docs\n\u251c\u2500\u2500 .github/               # GitHub Actions workflows\n\u251c\u2500\u2500 pyproject.toml         # Project dependencies and configuration\n\u2514\u2500\u2500 README.md              # Project overview\n</code></pre>"},{"location":"development/setup/#development-tools","title":"Development Tools","text":""},{"location":"development/setup/#ide-configuration","title":"IDE Configuration","text":"<p>VS Code Recommended Extensions: - Python - Pylance - Black Formatter - Ruff - GitLens</p> <p>.vscode/settings.json:</p> <pre><code>{\n    \"python.defaultInterpreterPath\": \".venv/bin/python\",\n    \"editor.formatOnSave\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.linting.enabled\": true\n}\n</code></pre>"},{"location":"development/setup/#debugging","title":"Debugging","text":"<p>VS Code Launch Configuration:</p> <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"FastAPI Development\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"uvicorn\",\n            \"args\": [\"app.main:app\", \"--reload\"],\n            \"console\": \"integratedTerminal\",\n            \"env\": {\"PYTHONPATH\": \"${workspaceFolder}\"}\n        }\n    ]\n}\n</code></pre>"},{"location":"development/setup/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"development/setup/#adding-a-new-api-endpoint","title":"Adding a New API Endpoint","text":"<ol> <li>Create the route in <code>app/api/routes.py</code>:</li> </ol> <pre><code>@router.post(\"/v1/new-endpoint\")\nasync def new_endpoint(request: NewRequest):\n    \"\"\"New endpoint description\"\"\"\n    # Implementation here\n    return {\"message\": \"Success\"}\n</code></pre> <ol> <li>Add Pydantic models for request/response:</li> </ol> <pre><code>class NewRequest(BaseModel):\n    param1: str\n    param2: Optional[int] = None\n\nclass NewResponse(BaseModel):\n    result: str\n    status: str\n</code></pre> <ol> <li>Write tests in <code>tests/test_main.py</code>:</li> </ol> <pre><code>def test_new_endpoint(client: TestClient):\n    response = client.post(\"/v1/new-endpoint\", json={\"param1\": \"test\"})\n    assert response.status_code == 200\n</code></pre>"},{"location":"development/setup/#adding-a-new-tool","title":"Adding a New Tool","text":"<ol> <li>Create tool documentation in <code>docs/tools/</code></li> <li>Implement tool functionality in a new module</li> <li>Integrate with LangChain tool system</li> <li>Add comprehensive tests</li> </ol>"},{"location":"development/setup/#environment-specific-setup","title":"Environment-Specific Setup","text":""},{"location":"development/setup/#development-environment","title":"Development Environment","text":"<ul> <li>Uses local OpenRouter API calls</li> <li>Debug mode enabled</li> <li>Auto-reload on code changes</li> <li>Detailed logging</li> </ul>"},{"location":"development/setup/#testing-environment","title":"Testing Environment","text":"<ul> <li>Mocked external APIs</li> <li>Test-specific environment variables</li> <li>Coverage reporting enabled</li> </ul>"},{"location":"development/setup/#production-environment","title":"Production Environment","text":"<ul> <li>Optimized for performance</li> <li>Minimal logging</li> <li>Health checks and monitoring</li> <li>Security hardening</li> </ul>"},{"location":"development/setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/setup/#common-issues","title":"Common Issues","text":"<p>Module Import Errors</p> <pre><code># Ensure you're in the virtual environment\nsource .venv/bin/activate\n\n# Reinstall dependencies\nuv sync --dev\n</code></pre> <p>Test Failures</p> <pre><code># Clear test cache\nuv run pytest --cache-clear\n\n# Run with verbose output\npython run_tests.py --verbose\n</code></pre> <p>API Key Issues - Verify <code>.env</code> file exists and is properly formatted - Check that <code>OPENROUTER_API_KEY</code> is set - Ensure the API key has sufficient permissions</p>"},{"location":"development/setup/#getting-help","title":"Getting Help","text":"<ol> <li>Check existing documentation in the <code>docs/</code> folder</li> <li>Review GitHub Issues for similar problems</li> <li>Create a new issue with detailed error information</li> <li>Include logs and environment details</li> </ol>"},{"location":"development/setup/#next-steps","title":"Next Steps","text":"<p>After setting up the development environment:</p> <ol> <li>Explore the codebase and understand the architecture</li> <li>Run the test suite to ensure everything works</li> <li>Try the API endpoints using the interactive docs at <code>http://localhost:8000/docs</code></li> <li>Read the architecture documentation to understand the system design</li> <li>Join the community and start contributing!</li> </ol>"},{"location":"development/setup/#contributing-guidelines","title":"Contributing Guidelines","text":"<ul> <li>Follow the existing code style and conventions</li> <li>Write tests for new functionality</li> <li>Update documentation for changes</li> <li>Use descriptive commit messages</li> <li>Create focused pull requests</li> </ul> <p>See Contributing Guide for detailed contribution guidelines.</p>"},{"location":"development/testing/","title":"Testing","text":""},{"location":"development/testing/#testing","title":"Testing","text":"<p>The project includes a comprehensive test suite to ensure code quality and reliability.</p>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":"<p>Quick Test (Recommended):</p> <pre><code>python run_tests.py\n</code></pre> <p>Run with Coverage:</p> <pre><code>python run_tests.py --coverage\n</code></pre> <p>Run Only Unit Tests:</p> <pre><code>python run_tests.py --unit\n</code></pre> <p>Run Only Integration Tests:</p> <pre><code>python run_tests.py --integration\n</code></pre> <p>Run Tests in Parallel:</p> <pre><code>python run_tests.py --parallel\n</code></pre>"},{"location":"development/testing/#manual-testing","title":"Manual Testing","text":"<p>For manual testing, you can use the provided test script:</p> <pre><code>./test_branch.sh\n</code></pre>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<ul> <li>Unit Tests: Mock external dependencies for fast execution</li> <li>Integration Tests: Test the full application flow</li> <li>Error Handling: Comprehensive error scenario testing</li> <li>Performance: Response time and resource usage testing</li> </ul>"},{"location":"development/testing/#github-actions-cicd","title":"GitHub Actions &amp; CI/CD","text":"<p>This project includes comprehensive GitHub Actions workflows for continuous integration and deployment with push protection.</p>"},{"location":"development/testing/#available-workflows","title":"Available Workflows","text":"<ol> <li>Python CI with UV (<code>.github/workflows/python-tests.yml</code>)</li> <li>Runs tests on Python 3.12</li> <li>Includes security scanning and linting</li> <li>Generates coverage reports</li> <li> <p>Uses UV for fast dependency management</p> </li> <li> <p>Branch Protection Enforcement (<code>.github/workflows/branch-protection.yml</code>)</p> </li> <li>Monitors direct pushes to protected branches</li> <li>Validates pull request requirements</li> <li>Provides push protection</li> </ol>"},{"location":"development/testing/#setting-up-github-actions","title":"Setting Up GitHub Actions","text":"<p>The workflows are automatically triggered on: - Push to <code>main</code>, <code>development</code>, and <code>feature/*</code> branches - Pull requests targeting <code>main</code> or <code>development</code> - Weekly schedule (Sunday at midnight UTC)</p>"},{"location":"development/testing/#branch-protection-setup","title":"Branch Protection Setup","text":"<p>To enable full push protection, configure branch protection rules in your repository settings:</p> <ol> <li>Go to Settings \u2192 Branches</li> <li>Add branch protection rule for <code>main</code> branch</li> <li>Enable the following:</li> <li>\u2705 Require pull request reviews before merging</li> <li>\u2705 Require approvals (1)</li> <li>\u2705 Require status checks to pass:<ul> <li><code>Test Python 3.12 on ubuntu-latest</code></li> <li><code>Security Scan</code></li> <li><code>Lint and Code Quality</code></li> </ul> </li> <li>\u2705 Require branches to be up to date before merging</li> <li>\u2705 Require linear history</li> <li>\u2705 Include administrators</li> </ol> <p>See Branch Protection Guide for detailed configuration instructions.</p>"},{"location":"tools/rag/","title":"RAG (Retrieval-Augmented Generation) System","text":"<p>The RAG system enhances the AI assistant's capabilities by providing access to a knowledge base of documents. This allows the assistant to answer questions based on specific content beyond its training data.</p>"},{"location":"tools/rag/#overview","title":"Overview","text":"<p>Retrieval-Augmented Generation combines information retrieval with generative AI to provide accurate, context-aware responses. The RAG system:</p> <ul> <li>Stores documents in a vector database for efficient retrieval</li> <li>Searches relevant content based on user queries</li> <li>Augments LLM responses with retrieved information</li> <li>Provides citations for source material</li> </ul>"},{"location":"tools/rag/#architecture","title":"Architecture","text":""},{"location":"tools/rag/#system-components","title":"System Components","text":"<pre><code>User Query \u2192 Embedding Model \u2192 Vector Search \u2192 Context Augmentation \u2192 LLM Response\n</code></pre> <ol> <li>Document Processing: Convert documents to vector embeddings</li> <li>Vector Storage: Store embeddings in a vector database</li> <li>Query Processing: Convert user queries to embeddings</li> <li>Similarity Search: Find most relevant document chunks</li> <li>Response Generation: Augment LLM prompt with retrieved context</li> </ol>"},{"location":"tools/rag/#configuration","title":"Configuration","text":""},{"location":"tools/rag/#environment-variables","title":"Environment Variables","text":"<p>Add the following to your <code>.env</code> file:</p> <pre><code># Vector database configuration\nVECTOR_DB_URL=postgresql://user:pass@localhost:5432/rag_db\n# or for SQLite (development)\nVECTOR_DB_URL=sqlite:///./rag.db\n\n# Embedding model settings\nEMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2\nEMBEDDING_DIMENSION=384\n\n# RAG settings\nRAG_MAX_RESULTS=5\nRAG_SIMILARITY_THRESHOLD=0.7\nRAG_CHUNK_SIZE=1000\nRAG_CHUNK_OVERLAP=200\n</code></pre>"},{"location":"tools/rag/#supported-vector-databases","title":"Supported Vector Databases","text":"<ul> <li>PostgreSQL with pgvector (recommended for production)</li> <li>SQLite with vector extension (development)</li> <li>ChromaDB (lightweight alternative)</li> <li>Pinecone (cloud-based)</li> </ul>"},{"location":"tools/rag/#implementation-status","title":"Implementation Status","text":"<p>Current Status: Planned Feature</p> <p>This integration is part of the roadmap and will be implemented in future releases.</p>"},{"location":"tools/rag/#planned-features","title":"Planned Features","text":""},{"location":"tools/rag/#document-ingestion","title":"Document Ingestion","text":"<pre><code># Planned implementation\nasync def ingest_document(file_path: str, metadata: dict = None) -&gt; str:\n    \"\"\"\n    Process and store a document in the RAG system\n\n    Args:\n        file_path: Path to document (PDF, TXT, DOCX, etc.)\n        metadata: Optional document metadata\n\n    Returns:\n        Document ID for reference\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tools/rag/#query-processing","title":"Query Processing","text":"<pre><code>async def rag_query(query: str, top_k: int = 5) -&gt; RAGResult:\n    \"\"\"\n    Search knowledge base and augment LLM response\n\n    Args:\n        query: User question or search term\n        top_k: Number of results to retrieve\n\n    Returns:\n        RAG result with context and citations\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tools/rag/#document-support","title":"Document Support","text":""},{"location":"tools/rag/#supported-formats","title":"Supported Formats","text":"<ul> <li>Text files (.txt, .md)</li> <li>PDF documents (.pdf)</li> <li>Word documents (.docx)</li> <li>Web pages (URL ingestion)</li> <li>Code files (.py, .js, .java, etc.)</li> </ul>"},{"location":"tools/rag/#processing-pipeline","title":"Processing Pipeline","text":"<ol> <li>Text extraction from various formats</li> <li>Chunking into manageable pieces</li> <li>Embedding generation using transformer models</li> <li>Vector storage in database</li> </ol>"},{"location":"tools/rag/#usage-examples","title":"Usage Examples","text":""},{"location":"tools/rag/#basic-rag-integration","title":"Basic RAG Integration","text":"<pre><code># Planned usage in tool calling\n@tool\nasync def search_knowledge_base(query: str) -&gt; str:\n    \"\"\"\n    Search the knowledge base for relevant information\n\n    Use this tool when you need to find specific information\n    from uploaded documents or the knowledge base.\n    \"\"\"\n    results = await rag_client.search(query, top_k=3)\n    return format_rag_results(results)\n</code></pre>"},{"location":"tools/rag/#document-management","title":"Document Management","text":"<pre><code># Planned document management\nasync def add_document_to_kb(file_path: str, description: str) -&gt; str:\n    \"\"\"\n    Add a document to the knowledge base\n\n    Returns document ID for future reference\n    \"\"\"\n    doc_id = await rag_client.ingest_document(file_path)\n    return f\"Document added with ID: {doc_id}\"\n</code></pre>"},{"location":"tools/rag/#setup-instructions","title":"Setup Instructions","text":""},{"location":"tools/rag/#option-1-postgresql-with-pgvector-production","title":"Option 1: PostgreSQL with pgvector (Production)","text":"<ol> <li>Install PostgreSQL with pgvector:</li> </ol> <pre><code># Using Docker\ndocker run -d -p 5432:5432 -e POSTGRES_PASSWORD=password ankane/pgvector\n</code></pre> <ol> <li>Create database:</li> </ol> <pre><code>CREATE DATABASE rag_db;\n\\c rag_db\nCREATE EXTENSION IF NOT EXISTS vector;\n</code></pre> <ol> <li>Configure the AI assistant:</li> </ol> <pre><code>echo \"VECTOR_DB_URL=postgresql://user:password@localhost:5432/rag_db\" &gt;&gt; .env\n</code></pre>"},{"location":"tools/rag/#option-2-sqlite-with-vector-extension-development","title":"Option 2: SQLite with vector extension (Development)","text":"<ol> <li>Install SQLite vector extension:</li> </ol> <pre><code>pip install sqlite-vector\n</code></pre> <ol> <li>Configure for development:</li> </ol> <pre><code>echo \"VECTOR_DB_URL=sqlite:///./rag.db\" &gt;&gt; .env\n</code></pre>"},{"location":"tools/rag/#security-considerations","title":"Security Considerations","text":""},{"location":"tools/rag/#data-privacy","title":"Data Privacy","text":"<ul> <li>Documents are stored locally or in controlled infrastructure</li> <li>No third-party data sharing unless explicitly configured</li> <li>Encryption at rest for sensitive documents</li> </ul>"},{"location":"tools/rag/#access-control","title":"Access Control","text":"<ul> <li>Implement document-level permissions</li> <li>Role-based access to knowledge bases</li> <li>Audit trails for document access</li> </ul>"},{"location":"tools/rag/#content-validation","title":"Content Validation","text":"<ul> <li>Scan for malicious content before ingestion</li> <li>Validate document sources</li> <li>Implement content filtering</li> </ul>"},{"location":"tools/rag/#performance-optimization","title":"Performance Optimization","text":""},{"location":"tools/rag/#indexing-strategy","title":"Indexing Strategy","text":"<ul> <li>Hierarchical indexing for large document collections</li> <li>Approximate nearest neighbor search for speed</li> <li>Caching frequently accessed embeddings</li> </ul>"},{"location":"tools/rag/#chunking-optimization","title":"Chunking Optimization","text":"<ul> <li>Semantic chunking based on content structure</li> <li>Overlap management to maintain context</li> <li>Size tuning for optimal retrieval</li> </ul>"},{"location":"tools/rag/#testing","title":"Testing","text":""},{"location":"tools/rag/#unit-tests","title":"Unit Tests","text":"<pre><code>@pytest.mark.asyncio\nasync def test_rag_ingestion():\n    \"\"\"Test document ingestion functionality\"\"\"\n    rag_client = RAGClient()\n    doc_id = await rag_client.ingest_document(\"test_document.txt\")\n    assert doc_id is not None\n</code></pre>"},{"location":"tools/rag/#integration-tests","title":"Integration Tests","text":"<pre><code>@pytest.mark.integration\nasync def test_rag_query():\n    \"\"\"Test RAG query functionality\"\"\"\n    rag_client = RAGClient()\n    results = await rag_client.search(\"test query\")\n    assert len(results) &gt; 0\n</code></pre>"},{"location":"tools/rag/#error-handling","title":"Error Handling","text":""},{"location":"tools/rag/#common-issues","title":"Common Issues","text":"<ul> <li>Database connectivity: Implement retry logic with backoff</li> <li>Document processing failures: Fallback to alternative parsers</li> <li>Embedding generation failures: Use backup models</li> </ul>"},{"location":"tools/rag/#planned-error-handling","title":"Planned Error Handling","text":"<pre><code>class RAGClient:\n    async def search_with_fallback(self, query: str) -&gt; RAGResult:\n        try:\n            return await self.search(query)\n        except RAGError as e:\n            logger.warning(f\"RAG search failed: {e}\")\n            # Fallback to basic keyword search or disable feature\n            return await self.fallback_search(query)\n</code></pre>"},{"location":"tools/rag/#roadmap","title":"Roadmap","text":""},{"location":"tools/rag/#phase-1-basic-rag","title":"Phase 1: Basic RAG","text":"<ul> <li>[ ] Implement document ingestion pipeline</li> <li>[ ] Add vector database integration</li> <li>[ ] Create basic search functionality</li> <li>[ ] Add unit tests</li> </ul>"},{"location":"tools/rag/#phase-2-advanced-features","title":"Phase 2: Advanced Features","text":"<ul> <li>[ ] Implement multi-modal RAG (images, audio)</li> <li>[ ] Add cross-document reasoning</li> <li>[ ] Implement citation generation</li> <li>[ ] Add result ranking and filtering</li> </ul>"},{"location":"tools/rag/#phase-3-production-ready","title":"Phase 3: Production Ready","text":"<ul> <li>[ ] Performance optimization for large datasets</li> <li>[ ] Advanced security features</li> <li>[ ] Monitoring and analytics</li> <li>[ ] Backup and recovery procedures</li> </ul>"},{"location":"tools/rag/#integration-with-ai-assistant","title":"Integration with AI Assistant","text":""},{"location":"tools/rag/#automatic-tool-selection","title":"Automatic Tool Selection","text":"<p>The AI agent will automatically determine when RAG is appropriate based on: - Query specificity and domain knowledge requirements - Availability of relevant documents in the knowledge base - User preferences and conversation context</p>"},{"location":"tools/rag/#response-enhancement","title":"Response Enhancement","text":"<p>RAG-enhanced responses will include: - Source citations for retrieved information - Confidence scores based on similarity matching - Contextual relevance indicators</p>"},{"location":"tools/rag/#related-documentation","title":"Related Documentation","text":"<ul> <li>AI Assistant Architecture</li> <li>Tool System Design</li> <li>API Endpoints Reference</li> <li>SearX Integration</li> </ul>"},{"location":"tools/rag/#support","title":"Support","text":"<p>For issues with RAG integration: 1. Check database connectivity and permissions 2. Verify document processing pipeline 3. Review embedding model compatibility 4. Consult the troubleshooting guide</p>"},{"location":"tools/rag/#best-practices","title":"Best Practices","text":""},{"location":"tools/rag/#document-organization","title":"Document Organization","text":"<ul> <li>Categorize documents by topic or project</li> <li>Maintain metadata for better retrieval</li> <li>Regularly update the knowledge base</li> </ul>"},{"location":"tools/rag/#query-optimization","title":"Query Optimization","text":"<ul> <li>Use specific queries for better results</li> <li>Combine with filters when appropriate</li> <li>Iterative refinement based on results</li> </ul>"},{"location":"tools/rag/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Track query response times</li> <li>Monitor retrieval accuracy</li> <li>Optimize chunking strategies</li> </ul>"},{"location":"tools/searx/","title":"SearX Integration","text":"<p>SearX is a privacy-respecting, hackable metasearch engine that allows the AI assistant to perform real-time web searches. This integration provides up-to-date information beyond the LLM's training data cutoff.</p>"},{"location":"tools/searx/#overview","title":"Overview","text":"<p>The SearX integration enables the AI assistant to: - Search the web for current information - Access real-time data and news - Bypass model knowledge limitations - Provide citations and sources for information</p>"},{"location":"tools/searx/#configuration","title":"Configuration","text":""},{"location":"tools/searx/#environment-variables","title":"Environment Variables","text":"<p>Add the following to your <code>.env</code> file:</p> <pre><code># SearX instance URL (self-hosted or public instance)\nSEARXNG_URL=http://localhost:8080\n\n# Optional: API key if using a secured instance\nSEARX_API_KEY=your_api_key_here\n\n# Search settings\nSEARX_TIMEOUT=30\nSEARX_MAX_RESULTS=10\n</code></pre>"},{"location":"tools/searx/#supported-searx-instances","title":"Supported SearX Instances","text":"<p>You can use: - Self-hosted: Run your own SearX instance for maximum privacy - Public instances: Use reliable public SearX instances - Cloud deployment: Deploy to cloud providers for scalability</p>"},{"location":"tools/searx/#implementation-status","title":"Implementation Status","text":"<p>Current Status: Planned Feature</p> <p>This integration is part of the roadmap and will be implemented in future releases.</p>"},{"location":"tools/searx/#planned-features","title":"Planned Features","text":""},{"location":"tools/searx/#basic-search-functionality","title":"Basic Search Functionality","text":"<pre><code># Planned implementation\nasync def search_web(query: str, categories: List[str] = None) -&gt; List[SearchResult]:\n    \"\"\"\n    Perform web search using SearX\n\n    Args:\n        query: Search query\n        categories: Optional search categories (news, images, etc.)\n\n    Returns:\n        List of search results with titles, URLs, and snippets\n    \"\"\"\n    pass\n</code></pre>"},{"location":"tools/searx/#advanced-search-options","title":"Advanced Search Options","text":"<ul> <li>Category filtering: News, images, videos, maps</li> <li>Language targeting: Search in specific languages</li> <li>Time filtering: Recent results only</li> <li>Region targeting: Country-specific results</li> </ul>"},{"location":"tools/searx/#result-processing","title":"Result Processing","text":"<ul> <li>Relevance scoring: Rank results by relevance</li> <li>Content extraction: Extract key information from pages</li> <li>Citation generation: Create proper citations for responses</li> <li>Duplicate detection: Filter duplicate results</li> </ul>"},{"location":"tools/searx/#usage-examples","title":"Usage Examples","text":""},{"location":"tools/searx/#basic-search-integration","title":"Basic Search Integration","text":"<pre><code># Planned usage in tool calling\n@tool\nasync def web_search(query: str) -&gt; str:\n    \"\"\"\n    Search the web for current information\n\n    Use this tool when you need up-to-date information that \n    may not be in the model's training data.\n    \"\"\"\n    results = await searx_client.search(query)\n    return format_search_results(results)\n</code></pre>"},{"location":"tools/searx/#integration-with-ai-agent","title":"Integration with AI Agent","text":"<p>The SearX tool will be automatically available to the AI assistant when needed. The agent will determine when real-time information is required and use the search tool accordingly.</p>"},{"location":"tools/searx/#setup-instructions","title":"Setup Instructions","text":""},{"location":"tools/searx/#option-1-self-hosted-searx-recommended","title":"Option 1: Self-Hosted SearX (Recommended)","text":"<ol> <li>Install SearX:</li> </ol> <pre><code># Using Docker (easiest method)\ndocker run -d -p 8080:8080 --name searx searx/searx\n</code></pre> <ol> <li>Verify installation:</li> </ol> <pre><code>curl http://localhost:8080\n</code></pre> <ol> <li>Configure the AI assistant:</li> </ol> <pre><code>echo \"SEARXNG_URL=http://localhost:8080\" &gt;&gt; .env\n</code></pre>"},{"location":"tools/searx/#option-2-public-instance","title":"Option 2: Public Instance","text":"<ol> <li>Find a reliable public instance from searx.space</li> <li>Update configuration:</li> </ol> <pre><code>echo \"SEARXNG_URL=https://public.searx.instance\" &gt;&gt; .env\n</code></pre>"},{"location":"tools/searx/#security-considerations","title":"Security Considerations","text":""},{"location":"tools/searx/#privacy-protection","title":"Privacy Protection","text":"<ul> <li>SearX doesn't track users or store search history</li> <li>Requests are anonymized through the SearX instance</li> <li>No personal data is shared with search engines</li> </ul>"},{"location":"tools/searx/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Implement appropriate rate limiting to avoid abuse</li> <li>Respect search engine terms of service</li> <li>Use caching to reduce duplicate requests</li> </ul>"},{"location":"tools/searx/#content-safety","title":"Content Safety","text":"<ul> <li>Implement result filtering for safe content</li> <li>Validate URLs before accessing content</li> <li>Use HTTPS for secure connections</li> </ul>"},{"location":"tools/searx/#error-handling","title":"Error Handling","text":""},{"location":"tools/searx/#common-issues","title":"Common Issues","text":"<ul> <li>Instance unavailable: Fallback to cached results or disable feature</li> <li>Rate limiting: Implement exponential backoff</li> <li>Network errors: Retry with circuit breaker pattern</li> </ul>"},{"location":"tools/searx/#planned-error-handling","title":"Planned Error Handling","text":"<pre><code>class SearXClient:\n    async def search_with_fallback(self, query: str) -&gt; SearchResults:\n        try:\n            return await self.search(query)\n        except SearXError as e:\n            logger.warning(f\"SearX search failed: {e}\")\n            return await self.get_cached_results(query)\n</code></pre>"},{"location":"tools/searx/#performance-optimization","title":"Performance Optimization","text":""},{"location":"tools/searx/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Query result caching: Cache search results for common queries</li> <li>Content caching: Cache extracted content from pages</li> <li>TTL settings: Set appropriate cache expiration times</li> </ul>"},{"location":"tools/searx/#async-operations","title":"Async Operations","text":"<ul> <li>Use async/await for non-blocking operations</li> <li>Implement connection pooling for HTTP requests</li> <li>Use background tasks for content processing</li> </ul>"},{"location":"tools/searx/#testing","title":"Testing","text":""},{"location":"tools/searx/#unit-tests","title":"Unit Tests","text":"<pre><code>@pytest.mark.asyncio\nasync def test_searx_search():\n    \"\"\"Test basic search functionality\"\"\"\n    client = SearXClient(\"http://localhost:8080\")\n    results = await client.search(\"test query\")\n    assert len(results) &gt; 0\n</code></pre>"},{"location":"tools/searx/#integration-tests","title":"Integration Tests","text":"<pre><code>@pytest.mark.integration\nasync def test_searx_integration():\n    \"\"\"Test full integration with AI agent\"\"\"\n    # Test that agent can use search tool effectively\n    pass\n</code></pre>"},{"location":"tools/searx/#roadmap","title":"Roadmap","text":""},{"location":"tools/searx/#phase-1-basic-integration","title":"Phase 1: Basic Integration","text":"<ul> <li>[ ] Implement basic search functionality</li> <li>[ ] Add error handling and retry logic</li> <li>[ ] Create unit tests</li> </ul>"},{"location":"tools/searx/#phase-2-advanced-features","title":"Phase 2: Advanced Features","text":"<ul> <li>[ ] Add result filtering and ranking</li> <li>[ ] Implement content extraction</li> <li>[ ] Add citation generation</li> </ul>"},{"location":"tools/searx/#phase-3-production-ready","title":"Phase 3: Production Ready","text":"<ul> <li>[ ] Performance optimization</li> <li>[ ] Comprehensive error handling</li> <li>[ ] Security hardening</li> </ul>"},{"location":"tools/searx/#related-documentation","title":"Related Documentation","text":"<ul> <li>SearX Official Documentation</li> <li>AI Assistant Architecture</li> <li>Tool System Design</li> </ul>"},{"location":"tools/searx/#support","title":"Support","text":"<p>For issues with SearX integration: 1. Check the SearX instance is running and accessible 2. Verify network connectivity and firewall settings 3. Review logs for detailed error information 4. Consult the troubleshooting guide</p>"}]}